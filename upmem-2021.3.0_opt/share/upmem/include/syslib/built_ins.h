/* Copyright 2020 UPMEM. All rights reserved.
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */

#ifndef BUILT_INS_H
#define BUILT_INS_H

/**
 * @file built_ins.h
 * @brief Provides access to the built-in functions
 *
 * Automatically generated by the DPU assembler
 */

#define __builtin_nor_u_rrici(dc, ra, imm, log_nz_cc, pc)                                                                        \
    __asm__("nor.u %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nor_u_rric(dc, ra, imm, log_set_cc)                                                                            \
    __asm__("nor.u %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nor_u_rrif(dc, ra, imm, false_cc)                                                                              \
    __asm__("nor.u %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nor_u_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                         \
    __asm__("nor.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                     \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_nor_u_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("nor.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_nor_u_rrr(dc, ra, rb)                                                                                          \
    __asm__("nor.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_hash_u_rrici(dc, ra, imm, log_nz_cc, pc)                                                                       \
    __asm__("hash.u %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_hash_u_rric(dc, ra, imm, log_set_cc)                                                                           \
    __asm__("hash.u %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_hash_u_rrif(dc, ra, imm, false_cc)                                                                             \
    __asm__("hash.u %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_hash_u_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                        \
    __asm__("hash.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                    \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_hash_u_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("hash.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_hash_u_rrr(dc, ra, rb)                                                                                         \
    __asm__("hash.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr_rrici(rc, ra, shift, imm_shift_nz_cc, pc)                                                                  \
    __asm__("lsr %[rc_wr32], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr_zrici(zero, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("lsr %[zero], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsr_rric(rc, ra, shift, log_set_cc)                                                                            \
    __asm__("lsr %[rc_wr32], %[ra_r32], " shift ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr_zric(zero, ra, shift, log_set_cc)                                                                          \
    __asm__("lsr %[zero], %[ra_r32], " shift ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsr_rri(rc, ra, shift) __asm__("lsr %[rc_wr32], %[ra_r32], " shift "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr_zri(zero, ra, shift) __asm__("lsr %[zero], %[ra_r32], " shift "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsr_rrrci(rc, ra, rb, shift_nz_cc, pc)                                                                         \
    __asm__("lsr %[rc_wr32], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                     \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr_zrrci(zero, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("lsr %[zero], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr_rrrc(rc, ra, rb, log_set_cc)                                                                               \
    __asm__("lsr %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr_zrrc(zero, ra, rb, log_set_cc)                                                                             \
    __asm__("lsr %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr_rrr(rc, ra, rb)                                                                                            \
    __asm__("lsr %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr_zrr(zero, ra, rb) __asm__("lsr %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_boot_rici(ra, imm, boot_cc, pc) __asm__("boot %[ra_r32], " imm ", " boot_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_sb_erir(endian, ra, off, rb)                                                                                   \
    __asm__("sb " endian ", %[ra_r32], " off ", %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_sb_erii(endian, ra, off, imm) __asm__("sb " endian ", %[ra_r32], " off ", " imm "" ::[ra_r32] "r"(ra) :)

#define __builtin_sb_esir(endian, sa, off, rb)                                                                                   \
    __asm__("sb " endian ", %[sa_r32], " off ", %[rb_wr32]" ::[sa_r32] "r"(sa), [rb_wr32] "r"(rb) :)

#define __builtin_sb_esii(endian, sa, off, imm) __asm__("sb " endian ", %[sa_r32], " off ", " imm "" ::[sa_r32] "r"(sa) :)

#define __builtin_lsl_s_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("lsl.s %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl_s_rric(dc, ra, shift, log_set_cc)                                                                          \
    __asm__("lsl.s %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl_s_rri(dc, ra, shift)                                                                                       \
    __asm__("lsl.s %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl_s_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("lsl.s %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                   \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl_s_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("lsl.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl_s_rrr(dc, ra, rb)                                                                                          \
    __asm__("lsl.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl_rrici(rc, ra, shift, imm_shift_nz_cc, pc)                                                                  \
    __asm__("lsl %[rc_wr32], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl_zrici(zero, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("lsl %[zero], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsl_rric(rc, ra, shift, log_set_cc)                                                                            \
    __asm__("lsl %[rc_wr32], %[ra_r32], " shift ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl_zric(zero, ra, shift, log_set_cc)                                                                          \
    __asm__("lsl %[zero], %[ra_r32], " shift ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsl_rri(rc, ra, shift) __asm__("lsl %[rc_wr32], %[ra_r32], " shift "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl_zri(zero, ra, shift) __asm__("lsl %[zero], %[ra_r32], " shift "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsl_rrrci(rc, ra, rb, shift_nz_cc, pc)                                                                         \
    __asm__("lsl %[rc_wr32], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                     \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl_zrrci(zero, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("lsl %[zero], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl_rrrc(rc, ra, rb, log_set_cc)                                                                               \
    __asm__("lsl %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl_zrrc(zero, ra, rb, log_set_cc)                                                                             \
    __asm__("lsl %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl_rrr(rc, ra, rb)                                                                                            \
    __asm__("lsl %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl_zrr(zero, ra, rb) __asm__("lsl %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lhu_erri(endian, rc, ra, off)                                                                                  \
    __asm__("lhu " endian ", %[rc_wr32], %[ra_r32], " off "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lhu_ersi(endian, rc, sa, off)                                                                                  \
    __asm__("lhu " endian ", %[rc_wr32], %[sa_r32], " off "" : [rc_wr32] "=r"(rc) : [sa_r32] "r"(sa) :)

#define __builtin_sw_erir(endian, ra, off, rb)                                                                                   \
    __asm__("sw " endian ", %[ra_r32], " off ", %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_sw_erii(endian, ra, off, imm) __asm__("sw " endian ", %[ra_r32], " off ", " imm "" ::[ra_r32] "r"(ra) :)

#define __builtin_sw_esir(endian, sa, off, rb)                                                                                   \
    __asm__("sw " endian ", %[sa_r32], " off ", %[rb_wr32]" ::[sa_r32] "r"(sa), [rb_wr32] "r"(rb) :)

#define __builtin_sw_esii(endian, sa, off, imm) __asm__("sw " endian ", %[sa_r32], " off ", " imm "" ::[sa_r32] "r"(sa) :)

#define __builtin_asr_s_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("asr.s %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_asr_s_rric(dc, ra, shift, log_set_cc)                                                                          \
    __asm__("asr.s %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_asr_s_rri(dc, ra, shift)                                                                                       \
    __asm__("asr.s %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_asr_s_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("asr.s %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                   \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_asr_s_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("asr.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_asr_s_rrr(dc, ra, rb)                                                                                          \
    __asm__("asr.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr1x_s_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                              \
    __asm__("lsr1x.s %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1x_s_rric(dc, ra, shift, log_set_cc)                                                                        \
    __asm__("lsr1x.s %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1x_s_rri(dc, ra, shift)                                                                                     \
    __asm__("lsr1x.s %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1x_s_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                     \
    __asm__("lsr1x.s %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                 \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr1x_s_rrrc(dc, ra, rb, log_set_cc)                                                                           \
    __asm__("lsr1x.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                          \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr1x_s_rrr(dc, ra, rb)                                                                                        \
    __asm__("lsr1x.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_uh_ul_rrrci(rc, ra, rb, mul_nz_cc, pc)                                                                     \
    __asm__("mul_uh_ul %[rc_wr32], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                                 \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_uh_ul_zrrci(zero, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_uh_ul %[zero], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_uh_ul_rrrc(rc, ra, rb, log_set_cc)                                                                         \
    __asm__("mul_uh_ul %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_uh_ul_zrrc(zero, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_uh_ul %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_uh_ul_rrr(rc, ra, rb)                                                                                      \
    __asm__("mul_uh_ul %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_uh_ul_zrr(zero, ra, rb)                                                                                    \
    __asm__("mul_uh_ul %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_ror_u_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("ror.u %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_ror_u_rric(dc, ra, shift, log_set_cc)                                                                          \
    __asm__("ror.u %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_ror_u_rri(dc, ra, shift)                                                                                       \
    __asm__("ror.u %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_ror_u_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("ror.u %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                   \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_ror_u_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("ror.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_ror_u_rrr(dc, ra, rb)                                                                                          \
    __asm__("ror.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_ul_ul_u_rrrci(dc, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_ul_ul.u %[dc_wr64], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                               \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_ul_ul_u_rrrc(dc, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_ul_ul.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_ul_ul_u_rrr(dc, ra, rb)                                                                                    \
    __asm__("mul_ul_ul.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_addc_rri(rc, ra, imm) __asm__("addc %[rc_wr32], %[ra_r32], " imm "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_addc_zri(zero, rb, imm) __asm__("addc %[zero], %[rb_wr32], " imm "" ::[rb_wr32] "r"(rb) :)

#define __builtin_addc_rrici(rc, ra, imm, add_nz_cc, pc)                                                                         \
    __asm__("addc %[rc_wr32], %[ra_r32], " imm ", " add_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_addc_zrici(zero, ra, imm, add_nz_cc, pc)                                                                       \
    __asm__("addc %[zero], %[ra_r32], " imm ", " add_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_addc_rric(rc, ra, imm, log_set_cc)                                                                             \
    __asm__("addc %[rc_wr32], %[ra_r32], " imm ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_addc_zric(zero, ra, imm, log_set_cc)                                                                           \
    __asm__("addc %[zero], %[ra_r32], " imm ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_addc_rrif(rc, ra, imm, false_cc)                                                                               \
    __asm__("addc %[rc_wr32], %[ra_r32], " imm ", " false_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_addc_zrif(zero, ra, imm, false_cc)                                                                             \
    __asm__("addc %[zero], %[ra_r32], " imm ", " false_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_addc_rrrci(rc, ra, rb, add_nz_cc, pc)                                                                          \
    __asm__("addc %[rc_wr32], %[ra_r32], %[rb_wr32], " add_nz_cc ", " pc ""                                                      \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_addc_zrrci(zero, ra, rb, add_nz_cc, pc)                                                                        \
    __asm__("addc %[zero], %[ra_r32], %[rb_wr32], " add_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_addc_rrrc(rc, ra, rb, log_set_cc)                                                                              \
    __asm__("addc %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_addc_zrrc(zero, ra, rb, log_set_cc)                                                                            \
    __asm__("addc %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_addc_rrr(rc, ra, rb)                                                                                           \
    __asm__("addc %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_addc_zrr(zero, ra, rb) __asm__("addc %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl_add_u_rrrici(dc, rb, ra, shift, div_nz_cc, pc)                                                             \
    __asm__("lsl_add.u %[dc_wr64], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc ""                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [rb_wr32] "r"(rb), [ra_r32] "r"(ra)                                                                                \
            :)

#define __builtin_lsl_add_u_rrri(dc, rb, ra, shift)                                                                              \
    __asm__("lsl_add.u %[dc_wr64], %[rb_wr32], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_time_cfg_u_rrci(dc, rb, true_cc, pc)                                                                           \
    __asm__("time_cfg.u %[dc_wr64], %[rb_wr32], " true_cc ", " pc "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb) :)

#define __builtin_time_cfg_u_rr(dc, rb) __asm__("time_cfg.u %[dc_wr64], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb) :)

#define __builtin_mul_ul_ul_rrrci(rc, ra, rb, mul_nz_cc, pc)                                                                     \
    __asm__("mul_ul_ul %[rc_wr32], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                                 \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_ul_ul_zrrci(zero, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_ul_ul %[zero], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_ul_ul_rrrc(rc, ra, rb, log_set_cc)                                                                         \
    __asm__("mul_ul_ul %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_ul_ul_zrrc(zero, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_ul_ul %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_ul_ul_rrr(rc, ra, rb)                                                                                      \
    __asm__("mul_ul_ul %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_ul_ul_zrr(zero, ra, rb)                                                                                    \
    __asm__("mul_ul_ul %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_time_s_rci(dc, true_cc, pc) __asm__("time.s %[dc_wr64], " true_cc ", " pc "" : [dc_wr64] "=r"(dc)::)

#define __builtin_time_s_r(dc) __asm__("time.s %[dc_wr64]" : [dc_wr64] "=r"(dc)::)

#define __builtin_call_rri(rc, ra, off) __asm__("call %[rc_wr32], %[ra_r32], " off "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_call_zri(zero, ra, off) __asm__("call %[zero], %[ra_r32], " off "" ::[ra_r32] "r"(ra) :)

#define __builtin_call_rrr(rc, ra, rb)                                                                                           \
    __asm__("call %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_call_zrr(zero, ra, rb) __asm__("call %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl1_rrici(rc, ra, shift, imm_shift_nz_cc, pc)                                                                 \
    __asm__("lsl1 %[rc_wr32], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1_zrici(zero, ra, shift, imm_shift_nz_cc, pc)                                                               \
    __asm__("lsl1 %[zero], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsl1_rric(rc, ra, shift, log_set_cc)                                                                           \
    __asm__("lsl1 %[rc_wr32], %[ra_r32], " shift ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1_zric(zero, ra, shift, log_set_cc)                                                                         \
    __asm__("lsl1 %[zero], %[ra_r32], " shift ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsl1_rri(rc, ra, shift)                                                                                        \
    __asm__("lsl1 %[rc_wr32], %[ra_r32], " shift "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1_zri(zero, ra, shift) __asm__("lsl1 %[zero], %[ra_r32], " shift "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsl1_rrrci(rc, ra, rb, shift_nz_cc, pc)                                                                        \
    __asm__("lsl1 %[rc_wr32], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                    \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl1_zrrci(zero, ra, rb, shift_nz_cc, pc)                                                                      \
    __asm__("lsl1 %[zero], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl1_rrrc(rc, ra, rb, log_set_cc)                                                                              \
    __asm__("lsl1 %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl1_zrrc(zero, ra, rb, log_set_cc)                                                                            \
    __asm__("lsl1 %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl1_rrr(rc, ra, rb)                                                                                           \
    __asm__("lsl1 %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl1_zrr(zero, ra, rb) __asm__("lsl1 %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_orn_u_rrici(dc, ra, imm, log_nz_cc, pc)                                                                        \
    __asm__("orn.u %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_orn_u_rric(dc, ra, imm, log_set_cc)                                                                            \
    __asm__("orn.u %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_orn_u_rrif(dc, ra, imm, false_cc)                                                                              \
    __asm__("orn.u %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_orn_u_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                         \
    __asm__("orn.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                     \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_orn_u_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("orn.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_orn_u_rrr(dc, ra, rb)                                                                                          \
    __asm__("orn.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rol_u_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("rol.u %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_rol_u_rric(dc, ra, shift, log_set_cc)                                                                          \
    __asm__("rol.u %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_rol_u_rri(dc, ra, shift)                                                                                       \
    __asm__("rol.u %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_rol_u_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("rol.u %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                   \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rol_u_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("rol.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rol_u_rrr(dc, ra, rb)                                                                                          \
    __asm__("rol.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_stop_ci(boot_cc, pc) __asm__("stop " boot_cc ", " pc "" :::)

#define __builtin_ldmai_rri(ra, rb, immDma)                                                                                      \
    __asm__("ldmai %[ra_r32], %[rb_wr32], " immDma "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr_s_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("lsr.s %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr_s_rric(dc, ra, shift, log_set_cc)                                                                          \
    __asm__("lsr.s %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr_s_rri(dc, ra, shift)                                                                                       \
    __asm__("lsr.s %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr_s_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("lsr.s %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                   \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr_s_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("lsr.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr_s_rrr(dc, ra, rb)                                                                                          \
    __asm__("lsr.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr_add_u_rrrici(dc, rb, ra, shift, div_nz_cc, pc)                                                             \
    __asm__("lsr_add.u %[dc_wr64], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc ""                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [rb_wr32] "r"(rb), [ra_r32] "r"(ra)                                                                                \
            :)

#define __builtin_lsr_add_u_rrri(dc, rb, ra, shift)                                                                              \
    __asm__("lsr_add.u %[dc_wr64], %[rb_wr32], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_time_cfg_rrci(rc, rb, true_cc, pc)                                                                             \
    __asm__("time_cfg %[rc_wr32], %[rb_wr32], " true_cc ", " pc "" : [rc_wr32] "=r"(rc) : [rb_wr32] "r"(rb) :)

#define __builtin_time_cfg_zrci(zero, rb, true_cc, pc)                                                                           \
    __asm__("time_cfg %[zero], %[rb_wr32], " true_cc ", " pc "" ::[rb_wr32] "r"(rb) :)

#define __builtin_time_cfg_rr(rc, rb) __asm__("time_cfg %[rc_wr32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [rb_wr32] "r"(rb) :)

#define __builtin_time_cfg_zr(zero, rb) __asm__("time_cfg %[zero], %[rb_wr32]" ::[rb_wr32] "r"(rb) :)

#define __builtin_or_rri(rc, ra, imm) __asm__("or %[rc_wr32], %[ra_r32], " imm "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_or_zri(zero, rb, imm) __asm__("or %[zero], %[rb_wr32], " imm "" ::[rb_wr32] "r"(rb) :)

#define __builtin_or_rrici(rc, ra, imm, log_nz_cc, pc)                                                                           \
    __asm__("or %[rc_wr32], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_or_zrici(zero, ra, imm, log_nz_cc, pc)                                                                         \
    __asm__("or %[zero], %[ra_r32], " imm ", " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_or_rric(rc, ra, imm, log_set_cc)                                                                               \
    __asm__("or %[rc_wr32], %[ra_r32], " imm ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_or_zric(zero, ra, imm, log_set_cc)                                                                             \
    __asm__("or %[zero], %[ra_r32], " imm ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_or_rrif(rc, ra, imm, false_cc)                                                                                 \
    __asm__("or %[rc_wr32], %[ra_r32], " imm ", " false_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_or_zrif(zero, ra, imm, false_cc) __asm__("or %[zero], %[ra_r32], " imm ", " false_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_or_rrrci(rc, ra, rb, log_nz_cc, pc)                                                                            \
    __asm__("or %[rc_wr32], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_or_zrrci(zero, ra, rb, log_nz_cc, pc)                                                                          \
    __asm__("or %[zero], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_or_rrrc(rc, ra, rb, log_set_cc)                                                                                \
    __asm__("or %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_or_zrrc(zero, ra, rb, log_set_cc)                                                                              \
    __asm__("or %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_or_rrr(rc, ra, rb)                                                                                             \
    __asm__("or %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_or_zrr(zero, ra, rb) __asm__("or %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_sl_rrrci(rc, ra, rb, mul_nz_cc, pc)                                                                     \
    __asm__("mul_sl_sl %[rc_wr32], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                                 \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_sl_zrrci(zero, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sl_sl %[zero], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_sl_rrrc(rc, ra, rb, log_set_cc)                                                                         \
    __asm__("mul_sl_sl %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_sl_zrrc(zero, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sl_sl %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_sl_rrr(rc, ra, rb)                                                                                      \
    __asm__("mul_sl_sl %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_sl_zrr(zero, ra, rb)                                                                                    \
    __asm__("mul_sl_sl %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_cao_u_rrci(dc, ra, count_nz_cc, pc)                                                                            \
    __asm__("cao.u %[dc_wr64], %[ra_r32], " count_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_cao_u_rrc(dc, ra, log_set_cc)                                                                                  \
    __asm__("cao.u %[dc_wr64], %[ra_r32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_cao_u_rr(dc, ra) __asm__("cao.u %[dc_wr64], %[ra_r32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsrx_rrici(rc, ra, shift, imm_shift_nz_cc, pc)                                                                 \
    __asm__("lsrx %[rc_wr32], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsrx_zrici(zero, ra, shift, imm_shift_nz_cc, pc)                                                               \
    __asm__("lsrx %[zero], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsrx_rric(rc, ra, shift, log_set_cc)                                                                           \
    __asm__("lsrx %[rc_wr32], %[ra_r32], " shift ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsrx_zric(zero, ra, shift, log_set_cc)                                                                         \
    __asm__("lsrx %[zero], %[ra_r32], " shift ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsrx_rri(rc, ra, shift)                                                                                        \
    __asm__("lsrx %[rc_wr32], %[ra_r32], " shift "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsrx_zri(zero, ra, shift) __asm__("lsrx %[zero], %[ra_r32], " shift "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsrx_rrrci(rc, ra, rb, shift_nz_cc, pc)                                                                        \
    __asm__("lsrx %[rc_wr32], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                    \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsrx_zrrci(zero, ra, rb, shift_nz_cc, pc)                                                                      \
    __asm__("lsrx %[zero], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsrx_rrrc(rc, ra, rb, log_set_cc)                                                                              \
    __asm__("lsrx %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsrx_zrrc(zero, ra, rb, log_set_cc)                                                                            \
    __asm__("lsrx %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsrx_rrr(rc, ra, rb)                                                                                           \
    __asm__("lsrx %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsrx_zrr(zero, ra, rb) __asm__("lsrx %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_cls_u_rrci(dc, ra, count_nz_cc, pc)                                                                            \
    __asm__("cls.u %[dc_wr64], %[ra_r32], " count_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_cls_u_rrc(dc, ra, log_set_cc)                                                                                  \
    __asm__("cls.u %[dc_wr64], %[ra_r32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_cls_u_rr(dc, ra) __asm__("cls.u %[dc_wr64], %[ra_r32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_mul_sh_sl_rrrci(rc, ra, rb, mul_nz_cc, pc)                                                                     \
    __asm__("mul_sh_sl %[rc_wr32], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                                 \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_sl_zrrci(zero, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sh_sl %[zero], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_sl_rrrc(rc, ra, rb, log_set_cc)                                                                         \
    __asm__("mul_sh_sl %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_sl_zrrc(zero, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sh_sl %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_sl_rrr(rc, ra, rb)                                                                                      \
    __asm__("mul_sh_sl %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_sl_zrr(zero, ra, rb)                                                                                    \
    __asm__("mul_sh_sl %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_sd_erir(endian, ra, off, db)                                                                                   \
    __asm__("sd " endian ", %[ra_r32], " off ", %[db_wr64]" ::[ra_r32] "r"(ra), [db_wr64] "r"(db) :)

#define __builtin_sd_erii(endian, ra, off, imm) __asm__("sd " endian ", %[ra_r32], " off ", " imm "" ::[ra_r32] "r"(ra) :)

#define __builtin_sd_esir(endian, sa, off, db)                                                                                   \
    __asm__("sd " endian ", %[sa_r32], " off ", %[db_wr64]" ::[sa_r32] "r"(sa), [db_wr64] "r"(db) :)

#define __builtin_sd_esii(endian, sa, off, imm) __asm__("sd " endian ", %[sa_r32], " off ", " imm "" ::[sa_r32] "r"(sa) :)

#define __builtin_lsrx_s_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                               \
    __asm__("lsrx.s %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsrx_s_rric(dc, ra, shift, log_set_cc)                                                                         \
    __asm__("lsrx.s %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsrx_s_rri(dc, ra, shift)                                                                                      \
    __asm__("lsrx.s %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsrx_s_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                      \
    __asm__("lsrx.s %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                  \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsrx_s_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("lsrx.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsrx_s_rrr(dc, ra, rb)                                                                                         \
    __asm__("lsrx.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl_add_rrrici(rc, rb, ra, shift, div_nz_cc, pc)                                                               \
    __asm__("lsl_add %[rc_wr32], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc ""                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [rb_wr32] "r"(rb), [ra_r32] "r"(ra)                                                                                \
            :)

#define __builtin_lsl_add_zrrici(zero, rb, ra, shift, div_nz_cc, pc)                                                             \
    __asm__("lsl_add %[zero], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc "" ::[rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_lsl_add_rrri(rc, rb, ra, shift)                                                                                \
    __asm__("lsl_add %[rc_wr32], %[rb_wr32], %[ra_r32], " shift "" : [rc_wr32] "=r"(rc) : [rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_lsl_add_zrri(zero, rb, ra, shift)                                                                              \
    __asm__("lsl_add %[zero], %[rb_wr32], %[ra_r32], " shift "" ::[rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_lsr1_s_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                               \
    __asm__("lsr1.s %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1_s_rric(dc, ra, shift, log_set_cc)                                                                         \
    __asm__("lsr1.s %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1_s_rri(dc, ra, shift)                                                                                      \
    __asm__("lsr1.s %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1_s_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                      \
    __asm__("lsr1.s %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                  \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr1_s_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("lsr1.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr1_s_rrr(dc, ra, rb)                                                                                         \
    __asm__("lsr1.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_sdma_rri(ra, rb, immDma)                                                                                       \
    __asm__("sdma %[ra_r32], %[rb_wr32], " immDma "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lhs_s_erri(endian, dc, ra, off)                                                                                \
    __asm__("lhs.s " endian ", %[dc_wr64], %[ra_r32], " off "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lslx_s_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                               \
    __asm__("lslx.s %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lslx_s_rric(dc, ra, shift, log_set_cc)                                                                         \
    __asm__("lslx.s %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lslx_s_rri(dc, ra, shift)                                                                                      \
    __asm__("lslx.s %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lslx_s_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                      \
    __asm__("lslx.s %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                  \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lslx_s_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("lslx.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lslx_s_rrr(dc, ra, rb)                                                                                         \
    __asm__("lslx.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_cmpb4_s_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                       \
    __asm__("cmpb4.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                   \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_cmpb4_s_rrrc(dc, ra, rb, log_set_cc)                                                                           \
    __asm__("cmpb4.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                          \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_cmpb4_s_rrr(dc, ra, rb)                                                                                        \
    __asm__("cmpb4.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr1x_rrici(rc, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("lsr1x %[rc_wr32], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1x_zrici(zero, ra, shift, imm_shift_nz_cc, pc)                                                              \
    __asm__("lsr1x %[zero], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsr1x_rric(rc, ra, shift, log_set_cc)                                                                          \
    __asm__("lsr1x %[rc_wr32], %[ra_r32], " shift ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1x_zric(zero, ra, shift, log_set_cc)                                                                        \
    __asm__("lsr1x %[zero], %[ra_r32], " shift ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsr1x_rri(rc, ra, shift)                                                                                       \
    __asm__("lsr1x %[rc_wr32], %[ra_r32], " shift "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1x_zri(zero, ra, shift) __asm__("lsr1x %[zero], %[ra_r32], " shift "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsr1x_rrrci(rc, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("lsr1x %[rc_wr32], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                   \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr1x_zrrci(zero, ra, rb, shift_nz_cc, pc)                                                                     \
    __asm__("lsr1x %[zero], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr1x_rrrc(rc, ra, rb, log_set_cc)                                                                             \
    __asm__("lsr1x %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr1x_zrrc(zero, ra, rb, log_set_cc)                                                                           \
    __asm__("lsr1x %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr1x_rrr(rc, ra, rb)                                                                                          \
    __asm__("lsr1x %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr1x_zrr(zero, ra, rb) __asm__("lsr1x %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_uh_ul_u_rrrci(dc, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_uh_ul.u %[dc_wr64], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                               \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_uh_ul_u_rrrc(dc, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_uh_ul.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_uh_ul_u_rrr(dc, ra, rb)                                                                                    \
    __asm__("mul_uh_ul.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lbu_erri(endian, rc, ra, off)                                                                                  \
    __asm__("lbu " endian ", %[rc_wr32], %[ra_r32], " off "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lbu_ersi(endian, rc, sa, off)                                                                                  \
    __asm__("lbu " endian ", %[rc_wr32], %[sa_r32], " off "" : [rc_wr32] "=r"(rc) : [sa_r32] "r"(sa) :)

#define __builtin_time_u_rci(dc, true_cc, pc) __asm__("time.u %[dc_wr64], " true_cc ", " pc "" : [dc_wr64] "=r"(dc)::)

#define __builtin_time_u_r(dc) __asm__("time.u %[dc_wr64]" : [dc_wr64] "=r"(dc)::)

#define __builtin_subc_s_rirci(dc, imm, ra, sub_nz_cc, pc)                                                                       \
    __asm__("subc.s %[dc_wr64], " imm ", %[ra_r32], " sub_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_s_rirc(dc, imm, ra, sub_set_cc)                                                                           \
    __asm__("subc.s %[dc_wr64], " imm ", %[ra_r32], " sub_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_s_rirf(dc, imm, ra, false_cc)                                                                             \
    __asm__("subc.s %[dc_wr64], " imm ", %[ra_r32], " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_s_rrici(dc, ra, imm, sub_nz_cc, pc)                                                                       \
    __asm__("subc.s %[dc_wr64], %[ra_r32], " imm ", " sub_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_s_rric(dc, ra, imm, ext_sub_set_cc)                                                                       \
    __asm__("subc.s %[dc_wr64], %[ra_r32], " imm ", " ext_sub_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_s_rrif(dc, ra, imm, false_cc)                                                                             \
    __asm__("subc.s %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_s_rrrci(dc, ra, rb, sub_nz_cc, pc)                                                                        \
    __asm__("subc.s %[dc_wr64], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc ""                                                    \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_subc_s_rrrc(dc, ra, rb, ext_sub_set_cc)                                                                        \
    __asm__("subc.s %[dc_wr64], %[ra_r32], %[rb_wr32], " ext_sub_set_cc ""                                                       \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_subc_s_rrr(dc, ra, rb)                                                                                         \
    __asm__("subc.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_clo_s_rrci(dc, ra, count_nz_cc, pc)                                                                            \
    __asm__("clo.s %[dc_wr64], %[ra_r32], " count_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_clo_s_rrc(dc, ra, log_set_cc)                                                                                  \
    __asm__("clo.s %[dc_wr64], %[ra_r32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_clo_s_rr(dc, ra) __asm__("clo.s %[dc_wr64], %[ra_r32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_xor_s_rrici(dc, ra, imm, log_nz_cc, pc)                                                                        \
    __asm__("xor.s %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_xor_s_rric(dc, ra, imm, log_set_cc)                                                                            \
    __asm__("xor.s %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_xor_s_rrif(dc, ra, imm, false_cc)                                                                              \
    __asm__("xor.s %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_xor_s_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                         \
    __asm__("xor.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                     \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_xor_s_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("xor.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_xor_s_rrr(dc, ra, rb)                                                                                          \
    __asm__("xor.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_ul_uh_rrrci(rc, ra, rb, mul_nz_cc, pc)                                                                     \
    __asm__("mul_ul_uh %[rc_wr32], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                                 \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_ul_uh_zrrci(zero, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_ul_uh %[zero], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_ul_uh_rrrc(rc, ra, rb, log_set_cc)                                                                         \
    __asm__("mul_ul_uh %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_ul_uh_zrrc(zero, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_ul_uh %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_ul_uh_rrr(rc, ra, rb)                                                                                      \
    __asm__("mul_ul_uh %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_ul_uh_zrr(zero, ra, rb)                                                                                    \
    __asm__("mul_ul_uh %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_uh_uh_rrrci(rc, ra, rb, mul_nz_cc, pc)                                                                     \
    __asm__("mul_uh_uh %[rc_wr32], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                                 \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_uh_uh_zrrci(zero, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_uh_uh %[zero], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_uh_uh_rrrc(rc, ra, rb, log_set_cc)                                                                         \
    __asm__("mul_uh_uh %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_uh_uh_zrrc(zero, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_uh_uh %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_uh_uh_rrr(rc, ra, rb)                                                                                      \
    __asm__("mul_uh_uh %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_uh_uh_zrr(zero, ra, rb)                                                                                    \
    __asm__("mul_uh_uh %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_ul_uh_u_rrrci(dc, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_ul_uh.u %[dc_wr64], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                               \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_ul_uh_u_rrrc(dc, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_ul_uh.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_ul_uh_u_rrr(dc, ra, rb)                                                                                    \
    __asm__("mul_ul_uh.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rsub_s_rrrci(dc, ra, rb, sub_nz_cc, pc)                                                                        \
    __asm__("rsub.s %[dc_wr64], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc ""                                                    \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rsub_s_rrrc(dc, ra, rb, sub_set_cc)                                                                            \
    __asm__("rsub.s %[dc_wr64], %[ra_r32], %[rb_wr32], " sub_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rsub_s_rrr(dc, ra, rb)                                                                                         \
    __asm__("rsub.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_cmpb4_rrrci(rc, ra, rb, log_nz_cc, pc)                                                                         \
    __asm__("cmpb4 %[rc_wr32], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                     \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_cmpb4_zrrci(zero, ra, rb, log_nz_cc, pc)                                                                       \
    __asm__("cmpb4 %[zero], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_cmpb4_rrrc(rc, ra, rb, log_set_cc)                                                                             \
    __asm__("cmpb4 %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_cmpb4_zrrc(zero, ra, rb, log_set_cc)                                                                           \
    __asm__("cmpb4 %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_cmpb4_rrr(rc, ra, rb)                                                                                          \
    __asm__("cmpb4 %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_cmpb4_zrr(zero, ra, rb) __asm__("cmpb4 %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_hash_rrici(rc, ra, imm, log_nz_cc, pc)                                                                         \
    __asm__("hash %[rc_wr32], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_hash_zrici(zero, ra, imm, log_nz_cc, pc)                                                                       \
    __asm__("hash %[zero], %[ra_r32], " imm ", " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_hash_rric(rc, ra, imm, log_set_cc)                                                                             \
    __asm__("hash %[rc_wr32], %[ra_r32], " imm ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_hash_zric(zero, ra, imm, log_set_cc)                                                                           \
    __asm__("hash %[zero], %[ra_r32], " imm ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_hash_rrif(rc, ra, imm, false_cc)                                                                               \
    __asm__("hash %[rc_wr32], %[ra_r32], " imm ", " false_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_hash_zrif(zero, ra, imm, false_cc)                                                                             \
    __asm__("hash %[zero], %[ra_r32], " imm ", " false_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_hash_rrrci(rc, ra, rb, log_nz_cc, pc)                                                                          \
    __asm__("hash %[rc_wr32], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                      \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_hash_zrrci(zero, ra, rb, log_nz_cc, pc)                                                                        \
    __asm__("hash %[zero], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_hash_rrrc(rc, ra, rb, log_set_cc)                                                                              \
    __asm__("hash %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_hash_zrrc(zero, ra, rb, log_set_cc)                                                                            \
    __asm__("hash %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_hash_rrr(rc, ra, rb)                                                                                           \
    __asm__("hash %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_hash_zrr(zero, ra, rb) __asm__("hash %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_sub_rir(rc, imm, ra) __asm__("sub %[rc_wr32], " imm ", %[ra_r32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_zir(zero, imm, rb) __asm__("sub %[zero], " imm ", %[rb_wr32]" ::[rb_wr32] "r"(rb) :)

#define __builtin_sub_rirci(rc, imm, ra, sub_nz_cc, pc)                                                                          \
    __asm__("sub %[rc_wr32], " imm ", %[ra_r32], " sub_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_zirci(zero, imm, ra, sub_nz_cc, pc)                                                                        \
    __asm__("sub %[zero], " imm ", %[ra_r32], " sub_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_sub_rirc(rc, imm, ra, sub_set_cc)                                                                              \
    __asm__("sub %[rc_wr32], " imm ", %[ra_r32], " sub_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_zirc(zero, imm, ra, sub_set_cc)                                                                            \
    __asm__("sub %[zero], " imm ", %[ra_r32], " sub_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_sub_rirf(rc, imm, ra, false_cc)                                                                                \
    __asm__("sub %[rc_wr32], " imm ", %[ra_r32], " false_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_zirf(zero, imm, ra, false_cc) __asm__("sub %[zero], " imm ", %[ra_r32], " false_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_sub_rrici(rc, ra, imm, sub_nz_cc, pc)                                                                          \
    __asm__("sub %[rc_wr32], %[ra_r32], " imm ", " sub_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_zrici(zero, ra, imm, sub_nz_cc, pc)                                                                        \
    __asm__("sub %[zero], %[ra_r32], " imm ", " sub_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_sub_rric(rc, ra, imm, ext_sub_set_cc)                                                                          \
    __asm__("sub %[rc_wr32], %[ra_r32], " imm ", " ext_sub_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_zric(zero, ra, imm, ext_sub_set_cc)                                                                        \
    __asm__("sub %[zero], %[ra_r32], " imm ", " ext_sub_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_sub_rrif(rc, ra, imm, false_cc)                                                                                \
    __asm__("sub %[rc_wr32], %[ra_r32], " imm ", " false_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_zrif(zero, ra, imm, false_cc) __asm__("sub %[zero], %[ra_r32], " imm ", " false_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_sub_ssi(sc, sa, imm) __asm__("sub %[sc_wr32], %[sa_r32], " imm "" ::[sc_wr32] "r"(sc), [sa_r32] "r"(sa) :)

#define __builtin_sub_sss(sc, sa, sb)                                                                                            \
    __asm__("sub %[sc_wr32], %[sa_r32], %[sb_wr32]" ::[sc_wr32] "r"(sc), [sa_r32] "r"(sa), [sb_wr32] "r"(sb) :)

#define __builtin_sub_rrrci(rc, ra, rb, sub_nz_cc, pc)                                                                           \
    __asm__("sub %[rc_wr32], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc ""                                                       \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_sub_zrrci(zero, ra, rb, sub_nz_cc, pc)                                                                         \
    __asm__("sub %[zero], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_sub_rrrc(rc, ra, rb, ext_sub_set_cc)                                                                           \
    __asm__("sub %[rc_wr32], %[ra_r32], %[rb_wr32], " ext_sub_set_cc ""                                                          \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_sub_zrrc(zero, ra, rb, ext_sub_set_cc)                                                                         \
    __asm__("sub %[zero], %[ra_r32], %[rb_wr32], " ext_sub_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_sub_rrr(rc, ra, rb)                                                                                            \
    __asm__("sub %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_sub_zrr(zero, ra, rb) __asm__("sub %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_extsb_rrci(rc, ra, log_nz_cc, pc)                                                                              \
    __asm__("extsb %[rc_wr32], %[ra_r32], " log_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_extsb_zrci(zero, ra, log_nz_cc, pc)                                                                            \
    __asm__("extsb %[zero], %[ra_r32], " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_extsb_rrc(rc, ra, log_set_cc)                                                                                  \
    __asm__("extsb %[rc_wr32], %[ra_r32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_extsb_zrc(zero, ra, log_set_cc) __asm__("extsb %[zero], %[ra_r32], " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_extsb_rr(rc, ra) __asm__("extsb %[rc_wr32], %[ra_r32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_extsb_zr(zero, ra) __asm__("extsb %[zero], %[ra_r32]" ::[ra_r32] "r"(ra) :)

#define __builtin_andn_s_rrici(dc, ra, imm, log_nz_cc, pc)                                                                       \
    __asm__("andn.s %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_andn_s_rric(dc, ra, imm, log_set_cc)                                                                           \
    __asm__("andn.s %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_andn_s_rrif(dc, ra, imm, false_cc)                                                                             \
    __asm__("andn.s %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_andn_s_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                        \
    __asm__("andn.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                    \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_andn_s_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("andn.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_andn_s_rrr(dc, ra, rb)                                                                                         \
    __asm__("andn.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_sl_s_rrrci(dc, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sl_sl.s %[dc_wr64], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                               \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_sl_s_rrrc(dc, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sl_sl.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_sl_s_rrr(dc, ra, rb)                                                                                    \
    __asm__("mul_sl_sl.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_movd_rrci(dc, db, true_false_cc, pc)                                                                           \
    __asm__("movd %[dc_wr64], %[db_wr64], " true_false_cc ", " pc "" : [dc_wr64] "=r"(dc) : [db_wr64] "r"(db) :)

#define __builtin_lsl1x_rrici(rc, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("lsl1x %[rc_wr32], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1x_zrici(zero, ra, shift, imm_shift_nz_cc, pc)                                                              \
    __asm__("lsl1x %[zero], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsl1x_rric(rc, ra, shift, log_set_cc)                                                                          \
    __asm__("lsl1x %[rc_wr32], %[ra_r32], " shift ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1x_zric(zero, ra, shift, log_set_cc)                                                                        \
    __asm__("lsl1x %[zero], %[ra_r32], " shift ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsl1x_rri(rc, ra, shift)                                                                                       \
    __asm__("lsl1x %[rc_wr32], %[ra_r32], " shift "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1x_zri(zero, ra, shift) __asm__("lsl1x %[zero], %[ra_r32], " shift "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsl1x_rrrci(rc, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("lsl1x %[rc_wr32], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                   \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl1x_zrrci(zero, ra, rb, shift_nz_cc, pc)                                                                     \
    __asm__("lsl1x %[zero], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl1x_rrrc(rc, ra, rb, log_set_cc)                                                                             \
    __asm__("lsl1x %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl1x_zrrc(zero, ra, rb, log_set_cc)                                                                           \
    __asm__("lsl1x %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl1x_rrr(rc, ra, rb)                                                                                          \
    __asm__("lsl1x %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl1x_zrr(zero, ra, rb) __asm__("lsl1x %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr_u_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("lsr.u %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr_u_rric(dc, ra, shift, log_set_cc)                                                                          \
    __asm__("lsr.u %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr_u_rri(dc, ra, shift)                                                                                       \
    __asm__("lsr.u %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr_u_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("lsr.u %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                   \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr_u_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("lsr.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr_u_rrr(dc, ra, rb)                                                                                          \
    __asm__("lsr.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_ul_s_rrrci(dc, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sl_ul.s %[dc_wr64], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                               \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_ul_s_rrrc(dc, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sl_ul.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_ul_s_rrr(dc, ra, rb)                                                                                    \
    __asm__("mul_sl_ul.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rsubc_s_rrrci(dc, ra, rb, sub_nz_cc, pc)                                                                       \
    __asm__("rsubc.s %[dc_wr64], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc ""                                                   \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rsubc_s_rrrc(dc, ra, rb, sub_set_cc)                                                                           \
    __asm__("rsubc.s %[dc_wr64], %[ra_r32], %[rb_wr32], " sub_set_cc ""                                                          \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rsubc_s_rrr(dc, ra, rb)                                                                                        \
    __asm__("rsubc.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl_sub_s_rrrici(dc, rb, ra, shift, div_nz_cc, pc)                                                             \
    __asm__("lsl_sub.s %[dc_wr64], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc ""                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [rb_wr32] "r"(rb), [ra_r32] "r"(ra)                                                                                \
            :)

#define __builtin_lsl_sub_s_rrri(dc, rb, ra, shift)                                                                              \
    __asm__("lsl_sub.s %[dc_wr64], %[rb_wr32], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_sats_s_rrci(dc, ra, log_nz_cc, pc)                                                                             \
    __asm__("sats.s %[dc_wr64], %[ra_r32], " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sats_s_rrc(dc, ra, log_set_cc)                                                                                 \
    __asm__("sats.s %[dc_wr64], %[ra_r32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sats_s_rr(dc, ra) __asm__("sats.s %[dc_wr64], %[ra_r32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_s_rirci(dc, imm, ra, sub_nz_cc, pc)                                                                        \
    __asm__("sub.s %[dc_wr64], " imm ", %[ra_r32], " sub_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_s_rirc(dc, imm, ra, sub_set_cc)                                                                            \
    __asm__("sub.s %[dc_wr64], " imm ", %[ra_r32], " sub_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_s_rirf(dc, imm, ra, false_cc)                                                                              \
    __asm__("sub.s %[dc_wr64], " imm ", %[ra_r32], " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_s_rrici(dc, ra, imm, sub_nz_cc, pc)                                                                        \
    __asm__("sub.s %[dc_wr64], %[ra_r32], " imm ", " sub_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_s_rric(dc, ra, imm, ext_sub_set_cc)                                                                        \
    __asm__("sub.s %[dc_wr64], %[ra_r32], " imm ", " ext_sub_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_s_rrif(dc, ra, imm, false_cc)                                                                              \
    __asm__("sub.s %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_s_rrrci(dc, ra, rb, sub_nz_cc, pc)                                                                         \
    __asm__("sub.s %[dc_wr64], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc ""                                                     \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_sub_s_rrrc(dc, ra, rb, ext_sub_set_cc)                                                                         \
    __asm__("sub.s %[dc_wr64], %[ra_r32], %[rb_wr32], " ext_sub_set_cc ""                                                        \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_sub_s_rrr(dc, ra, rb)                                                                                          \
    __asm__("sub.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_and_rri(rc, ra, imm) __asm__("and %[rc_wr32], %[ra_wr32], " imm "" : [rc_wr32] "=r"(rc) : [ra_wr32] "r"(ra) :)

#define __builtin_and_zri(zero, rb, imm) __asm__("and %[zero], %[rb_wr32], " imm "" ::[rb_wr32] "r"(rb) :)

#define __builtin_and_rrici(rc, ra, imm, log_nz_cc, pc)                                                                          \
    __asm__("and %[rc_wr32], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_and_zrici(zero, ra, imm, log_nz_cc, pc)                                                                        \
    __asm__("and %[zero], %[ra_r32], " imm ", " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_and_rric(rc, ra, imm, log_set_cc)                                                                              \
    __asm__("and %[rc_wr32], %[ra_r32], " imm ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_and_zric(zero, ra, imm, log_set_cc)                                                                            \
    __asm__("and %[zero], %[ra_r32], " imm ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_and_rrif(rc, ra, imm, false_cc)                                                                                \
    __asm__("and %[rc_wr32], %[ra_r32], " imm ", " false_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_and_zrif(zero, ra, imm, false_cc) __asm__("and %[zero], %[ra_r32], " imm ", " false_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_and_rrrci(rc, ra, rb, log_nz_cc, pc)                                                                           \
    __asm__("and %[rc_wr32], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                       \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_and_zrrci(zero, ra, rb, log_nz_cc, pc)                                                                         \
    __asm__("and %[zero], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_and_rrrc(rc, ra, rb, log_set_cc)                                                                               \
    __asm__("and %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_and_zrrc(zero, ra, rb, log_set_cc)                                                                             \
    __asm__("and %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_and_rrr(rc, ra, rb)                                                                                            \
    __asm__("and %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_and_zrr(zero, ra, rb) __asm__("and %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_cls_rrci(rc, ra, count_nz_cc, pc)                                                                              \
    __asm__("cls %[rc_wr32], %[ra_r32], " count_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_cls_zrci(zero, ra, count_nz_cc, pc)                                                                            \
    __asm__("cls %[zero], %[ra_r32], " count_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_cls_rrc(rc, ra, log_set_cc)                                                                                    \
    __asm__("cls %[rc_wr32], %[ra_r32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_cls_zrc(zero, ra, log_set_cc) __asm__("cls %[zero], %[ra_r32], " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_cls_rr(rc, ra) __asm__("cls %[rc_wr32], %[ra_r32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_cls_zr(zero, ra) __asm__("cls %[zero], %[ra_r32]" ::[ra_r32] "r"(ra) :)

#define __builtin_rsub_rrrci(rc, ra, rb, sub_nz_cc, pc)                                                                          \
    __asm__("rsub %[rc_wr32], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc ""                                                      \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rsub_zrrci(zero, ra, rb, sub_nz_cc, pc)                                                                        \
    __asm__("rsub %[zero], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rsub_rrrc(rc, ra, rb, sub_set_cc)                                                                              \
    __asm__("rsub %[rc_wr32], %[ra_r32], %[rb_wr32], " sub_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rsub_zrrc(zero, ra, rb, sub_set_cc)                                                                            \
    __asm__("rsub %[zero], %[ra_r32], %[rb_wr32], " sub_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rsub_rrr(rc, ra, rb)                                                                                           \
    __asm__("rsub %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rsub_zrr(zero, ra, rb) __asm__("rsub %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_div_step_rrrici(dc, ra, db, shift, div_cc, pc)                                                                 \
    __asm__("div_step %[dc_wr64], %[ra_r32], %[db_wr64], " shift ", " div_cc ", " pc ""                                          \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [db_wr64] "r"(db)                                                                                \
            :)

#define __builtin_rol_rrici(rc, ra, shift, imm_shift_nz_cc, pc)                                                                  \
    __asm__("rol %[rc_wr32], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_rol_zrici(zero, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("rol %[zero], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_rol_rric(rc, ra, shift, log_set_cc)                                                                            \
    __asm__("rol %[rc_wr32], %[ra_r32], " shift ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_rol_zric(zero, ra, shift, log_set_cc)                                                                          \
    __asm__("rol %[zero], %[ra_r32], " shift ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_rol_rri(rc, ra, shift) __asm__("rol %[rc_wr32], %[ra_r32], " shift "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_rol_zri(zero, ra, shift) __asm__("rol %[zero], %[ra_r32], " shift "" ::[ra_r32] "r"(ra) :)

#define __builtin_rol_rrrci(rc, ra, rb, shift_nz_cc, pc)                                                                         \
    __asm__("rol %[rc_wr32], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                     \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rol_zrrci(zero, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("rol %[zero], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rol_rrrc(rc, ra, rb, log_set_cc)                                                                               \
    __asm__("rol %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rol_zrrc(zero, ra, rb, log_set_cc)                                                                             \
    __asm__("rol %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rol_rrr(rc, ra, rb)                                                                                            \
    __asm__("rol %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rol_zrr(zero, ra, rb) __asm__("rol %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl1_s_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                               \
    __asm__("lsl1.s %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1_s_rric(dc, ra, shift, log_set_cc)                                                                         \
    __asm__("lsl1.s %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1_s_rri(dc, ra, shift)                                                                                      \
    __asm__("lsl1.s %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1_s_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                      \
    __asm__("lsl1.s %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                  \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl1_s_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("lsl1.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl1_s_rrr(dc, ra, rb)                                                                                         \
    __asm__("lsl1.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_swapd_rrci(dc, db, true_false_cc, pc)                                                                          \
    __asm__("swapd %[dc_wr64], %[db_wr64], " true_false_cc ", " pc "" : [dc_wr64] "=r"(dc) : [db_wr64] "r"(db) :)

#define __builtin_add_s_rri(dc, rb, imm)                                                                                         \
    __asm__("add.s %[dc_wr64], %[rb_wr32], " imm "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb) :)

#define __builtin_add_s_rrici(dc, ra, imm, add_nz_cc, pc)                                                                        \
    __asm__("add.s %[dc_wr64], %[ra_r32], " imm ", " add_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_add_s_rric(dc, ra, imm, log_set_cc)                                                                            \
    __asm__("add.s %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_add_s_rrif(dc, ra, imm, false_cc)                                                                              \
    __asm__("add.s %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_add_s_rrrci(dc, ra, rb, add_nz_cc, pc)                                                                         \
    __asm__("add.s %[dc_wr64], %[ra_r32], %[rb_wr32], " add_nz_cc ", " pc ""                                                     \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_add_s_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("add.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_add_s_rrr(dc, ra, rb)                                                                                          \
    __asm__("add.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nand_rrici(rc, ra, imm, log_nz_cc, pc)                                                                         \
    __asm__("nand %[rc_wr32], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_nand_zrici(zero, ra, imm, log_nz_cc, pc)                                                                       \
    __asm__("nand %[zero], %[ra_r32], " imm ", " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_nand_rric(rc, ra, imm, log_set_cc)                                                                             \
    __asm__("nand %[rc_wr32], %[ra_r32], " imm ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_nand_zric(zero, ra, imm, log_set_cc)                                                                           \
    __asm__("nand %[zero], %[ra_r32], " imm ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_nand_rrif(rc, ra, imm, false_cc)                                                                               \
    __asm__("nand %[rc_wr32], %[ra_r32], " imm ", " false_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_nand_zrif(zero, ra, imm, false_cc)                                                                             \
    __asm__("nand %[zero], %[ra_r32], " imm ", " false_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_nand_rrrci(rc, ra, rb, log_nz_cc, pc)                                                                          \
    __asm__("nand %[rc_wr32], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                      \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_nand_zrrci(zero, ra, rb, log_nz_cc, pc)                                                                        \
    __asm__("nand %[zero], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nand_rrrc(rc, ra, rb, log_set_cc)                                                                              \
    __asm__("nand %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nand_zrrc(zero, ra, rb, log_set_cc)                                                                            \
    __asm__("nand %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nand_rrr(rc, ra, rb)                                                                                           \
    __asm__("nand %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nand_zrr(zero, ra, rb) __asm__("nand %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lbs_s_erri(endian, dc, ra, off)                                                                                \
    __asm__("lbs.s " endian ", %[dc_wr64], %[ra_r32], " off "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl_u_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("lsl.u %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl_u_rric(dc, ra, shift, log_set_cc)                                                                          \
    __asm__("lsl.u %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl_u_rri(dc, ra, shift)                                                                                       \
    __asm__("lsl.u %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl_u_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("lsl.u %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                   \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl_u_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("lsl.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl_u_rrr(dc, ra, rb)                                                                                          \
    __asm__("lsl.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lw_s_erri(endian, dc, ra, off)                                                                                 \
    __asm__("lw.s " endian ", %[dc_wr64], %[ra_r32], " off "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sb_id_erii(endian, ra, off, imm) __asm__("sb_id " endian ", %[ra_r32], " off ", " imm "" ::[ra_r32] "r"(ra) :)

#define __builtin_and_s_rki(dc, ra, imm) __asm__("and.s %[dc_wr64], %[ra_r32], " imm "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_and_s_rri(dc, rb, imm)                                                                                         \
    __asm__("and.s %[dc_wr64], %[rb_wr32], " imm "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb) :)

#define __builtin_and_s_rrici(dc, ra, imm, log_nz_cc, pc)                                                                        \
    __asm__("and.s %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_and_s_rric(dc, ra, imm, log_set_cc)                                                                            \
    __asm__("and.s %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_and_s_rrif(dc, ra, imm, false_cc)                                                                              \
    __asm__("and.s %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_and_s_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                         \
    __asm__("and.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                     \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_and_s_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("and.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_and_s_rrr(dc, ra, rb)                                                                                          \
    __asm__("and.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nop_() __asm__("nop " :::)

#define __builtin_sd_id_erii(endian, ra, off, imm) __asm__("sd_id " endian ", %[ra_r32], " off ", " imm "" ::[ra_r32] "r"(ra) :)

#define __builtin_sh_id_erii(endian, ra, off, imm) __asm__("sh_id " endian ", %[ra_r32], " off ", " imm "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsr1x_u_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                              \
    __asm__("lsr1x.u %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1x_u_rric(dc, ra, shift, log_set_cc)                                                                        \
    __asm__("lsr1x.u %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1x_u_rri(dc, ra, shift)                                                                                     \
    __asm__("lsr1x.u %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1x_u_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                     \
    __asm__("lsr1x.u %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                 \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr1x_u_rrrc(dc, ra, rb, log_set_cc)                                                                           \
    __asm__("lsr1x.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                          \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr1x_u_rrr(dc, ra, rb)                                                                                        \
    __asm__("lsr1x.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_extsh_rrci(rc, ra, log_nz_cc, pc)                                                                              \
    __asm__("extsh %[rc_wr32], %[ra_r32], " log_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_extsh_zrci(zero, ra, log_nz_cc, pc)                                                                            \
    __asm__("extsh %[zero], %[ra_r32], " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_extsh_rrc(rc, ra, log_set_cc)                                                                                  \
    __asm__("extsh %[rc_wr32], %[ra_r32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_extsh_zrc(zero, ra, log_set_cc) __asm__("extsh %[zero], %[ra_r32], " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_extsh_rr(rc, ra) __asm__("extsh %[rc_wr32], %[ra_r32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_extsh_zr(zero, ra) __asm__("extsh %[zero], %[ra_r32]" ::[ra_r32] "r"(ra) :)

#define __builtin_rol_add_s_rrrici(dc, rb, ra, shift, div_nz_cc, pc)                                                             \
    __asm__("rol_add.s %[dc_wr64], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc ""                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [rb_wr32] "r"(rb), [ra_r32] "r"(ra)                                                                                \
            :)

#define __builtin_rol_add_s_rrri(dc, rb, ra, shift)                                                                              \
    __asm__("rol_add.s %[dc_wr64], %[rb_wr32], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_acquire_rici(ra, imm, acquire_cc, pc)                                                                          \
    __asm__("acquire %[ra_r32], " imm ", " acquire_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_xor_rri(rc, ra, imm) __asm__("xor %[rc_wr32], %[ra_r32], " imm "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_xor_zri(zero, rb, imm) __asm__("xor %[zero], %[rb_wr32], " imm "" ::[rb_wr32] "r"(rb) :)

#define __builtin_xor_rrici(rc, ra, imm, log_nz_cc, pc)                                                                          \
    __asm__("xor %[rc_wr32], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_xor_zrici(zero, ra, imm, log_nz_cc, pc)                                                                        \
    __asm__("xor %[zero], %[ra_r32], " imm ", " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_xor_rric(rc, ra, imm, log_set_cc)                                                                              \
    __asm__("xor %[rc_wr32], %[ra_r32], " imm ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_xor_zric(zero, ra, imm, log_set_cc)                                                                            \
    __asm__("xor %[zero], %[ra_r32], " imm ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_xor_rrif(rc, ra, imm, false_cc)                                                                                \
    __asm__("xor %[rc_wr32], %[ra_r32], " imm ", " false_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_xor_zrif(zero, ra, imm, false_cc) __asm__("xor %[zero], %[ra_r32], " imm ", " false_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_xor_rrrci(rc, ra, rb, log_nz_cc, pc)                                                                           \
    __asm__("xor %[rc_wr32], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                       \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_xor_zrrci(zero, ra, rb, log_nz_cc, pc)                                                                         \
    __asm__("xor %[zero], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_xor_rrrc(rc, ra, rb, log_set_cc)                                                                               \
    __asm__("xor %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_xor_zrrc(zero, ra, rb, log_set_cc)                                                                             \
    __asm__("xor %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_xor_rrr(rc, ra, rb)                                                                                            \
    __asm__("xor %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_xor_zrr(zero, ra, rb) __asm__("xor %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsrx_u_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                               \
    __asm__("lsrx.u %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsrx_u_rric(dc, ra, shift, log_set_cc)                                                                         \
    __asm__("lsrx.u %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsrx_u_rri(dc, ra, shift)                                                                                      \
    __asm__("lsrx.u %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsrx_u_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                      \
    __asm__("lsrx.u %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                  \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsrx_u_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("lsrx.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsrx_u_rrr(dc, ra, rb)                                                                                         \
    __asm__("lsrx.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lslx_rrici(rc, ra, shift, imm_shift_nz_cc, pc)                                                                 \
    __asm__("lslx %[rc_wr32], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lslx_zrici(zero, ra, shift, imm_shift_nz_cc, pc)                                                               \
    __asm__("lslx %[zero], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lslx_rric(rc, ra, shift, log_set_cc)                                                                           \
    __asm__("lslx %[rc_wr32], %[ra_r32], " shift ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lslx_zric(zero, ra, shift, log_set_cc)                                                                         \
    __asm__("lslx %[zero], %[ra_r32], " shift ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lslx_rri(rc, ra, shift)                                                                                        \
    __asm__("lslx %[rc_wr32], %[ra_r32], " shift "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lslx_zri(zero, ra, shift) __asm__("lslx %[zero], %[ra_r32], " shift "" ::[ra_r32] "r"(ra) :)

#define __builtin_lslx_rrrci(rc, ra, rb, shift_nz_cc, pc)                                                                        \
    __asm__("lslx %[rc_wr32], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                    \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lslx_zrrci(zero, ra, rb, shift_nz_cc, pc)                                                                      \
    __asm__("lslx %[zero], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lslx_rrrc(rc, ra, rb, log_set_cc)                                                                              \
    __asm__("lslx %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lslx_zrrc(zero, ra, rb, log_set_cc)                                                                            \
    __asm__("lslx %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lslx_rrr(rc, ra, rb)                                                                                           \
    __asm__("lslx %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lslx_zrr(zero, ra, rb) __asm__("lslx %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_asr_u_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("asr.u %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_asr_u_rric(dc, ra, shift, log_set_cc)                                                                          \
    __asm__("asr.u %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_asr_u_rri(dc, ra, shift)                                                                                       \
    __asm__("asr.u %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_asr_u_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("asr.u %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                   \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_asr_u_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("asr.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_asr_u_rrr(dc, ra, rb)                                                                                          \
    __asm__("asr.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nor_s_rrici(dc, ra, imm, log_nz_cc, pc)                                                                        \
    __asm__("nor.s %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nor_s_rric(dc, ra, imm, log_set_cc)                                                                            \
    __asm__("nor.s %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nor_s_rrif(dc, ra, imm, false_cc)                                                                              \
    __asm__("nor.s %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nor_s_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                         \
    __asm__("nor.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                     \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_nor_s_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("nor.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_nor_s_rrr(dc, ra, rb)                                                                                          \
    __asm__("nor.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_sh_rrrci(rc, ra, rb, mul_nz_cc, pc)                                                                     \
    __asm__("mul_sl_sh %[rc_wr32], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                                 \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_sh_zrrci(zero, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sl_sh %[zero], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_sh_rrrc(rc, ra, rb, log_set_cc)                                                                         \
    __asm__("mul_sl_sh %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_sh_zrrc(zero, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sl_sh %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_sh_rrr(rc, ra, rb)                                                                                      \
    __asm__("mul_sl_sh %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_sh_zrr(zero, ra, rb)                                                                                    \
    __asm__("mul_sl_sh %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_subc_u_rirci(dc, imm, ra, sub_nz_cc, pc)                                                                       \
    __asm__("subc.u %[dc_wr64], " imm ", %[ra_r32], " sub_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_u_rirc(dc, imm, ra, sub_set_cc)                                                                           \
    __asm__("subc.u %[dc_wr64], " imm ", %[ra_r32], " sub_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_u_rirf(dc, imm, ra, false_cc)                                                                             \
    __asm__("subc.u %[dc_wr64], " imm ", %[ra_r32], " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_u_rrici(dc, ra, imm, sub_nz_cc, pc)                                                                       \
    __asm__("subc.u %[dc_wr64], %[ra_r32], " imm ", " sub_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_u_rric(dc, ra, imm, ext_sub_set_cc)                                                                       \
    __asm__("subc.u %[dc_wr64], %[ra_r32], " imm ", " ext_sub_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_u_rrif(dc, ra, imm, false_cc)                                                                             \
    __asm__("subc.u %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_u_rrrci(dc, ra, rb, sub_nz_cc, pc)                                                                        \
    __asm__("subc.u %[dc_wr64], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc ""                                                    \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_subc_u_rrrc(dc, ra, rb, ext_sub_set_cc)                                                                        \
    __asm__("subc.u %[dc_wr64], %[ra_r32], %[rb_wr32], " ext_sub_set_cc ""                                                       \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_subc_u_rrr(dc, ra, rb)                                                                                         \
    __asm__("subc.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nxor_rrici(rc, ra, imm, log_nz_cc, pc)                                                                         \
    __asm__("nxor %[rc_wr32], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_nxor_zrici(zero, ra, imm, log_nz_cc, pc)                                                                       \
    __asm__("nxor %[zero], %[ra_r32], " imm ", " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_nxor_rric(rc, ra, imm, log_set_cc)                                                                             \
    __asm__("nxor %[rc_wr32], %[ra_r32], " imm ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_nxor_zric(zero, ra, imm, log_set_cc)                                                                           \
    __asm__("nxor %[zero], %[ra_r32], " imm ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_nxor_rrif(rc, ra, imm, false_cc)                                                                               \
    __asm__("nxor %[rc_wr32], %[ra_r32], " imm ", " false_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_nxor_zrif(zero, ra, imm, false_cc)                                                                             \
    __asm__("nxor %[zero], %[ra_r32], " imm ", " false_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_nxor_rrrci(rc, ra, rb, log_nz_cc, pc)                                                                          \
    __asm__("nxor %[rc_wr32], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                      \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_nxor_zrrci(zero, ra, rb, log_nz_cc, pc)                                                                        \
    __asm__("nxor %[zero], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nxor_rrrc(rc, ra, rb, log_set_cc)                                                                              \
    __asm__("nxor %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nxor_zrrc(zero, ra, rb, log_set_cc)                                                                            \
    __asm__("nxor %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nxor_rrr(rc, ra, rb)                                                                                           \
    __asm__("nxor %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nxor_zrr(zero, ra, rb) __asm__("nxor %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_xor_u_rrici(dc, ra, imm, log_nz_cc, pc)                                                                        \
    __asm__("xor.u %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_xor_u_rric(dc, ra, imm, log_set_cc)                                                                            \
    __asm__("xor.u %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_xor_u_rrif(dc, ra, imm, false_cc)                                                                              \
    __asm__("xor.u %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_xor_u_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                         \
    __asm__("xor.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                     \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_xor_u_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("xor.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_xor_u_rrr(dc, ra, rb)                                                                                          \
    __asm__("xor.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_clo_u_rrci(dc, ra, count_nz_cc, pc)                                                                            \
    __asm__("clo.u %[dc_wr64], %[ra_r32], " count_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_clo_u_rrc(dc, ra, log_set_cc)                                                                                  \
    __asm__("clo.u %[dc_wr64], %[ra_r32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_clo_u_rr(dc, ra) __asm__("clo.u %[dc_wr64], %[ra_r32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_addc_s_rrici(dc, ra, imm, add_nz_cc, pc)                                                                       \
    __asm__("addc.s %[dc_wr64], %[ra_r32], " imm ", " add_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_addc_s_rric(dc, ra, imm, log_set_cc)                                                                           \
    __asm__("addc.s %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_addc_s_rrif(dc, ra, imm, false_cc)                                                                             \
    __asm__("addc.s %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_addc_s_rrrci(dc, ra, rb, add_nz_cc, pc)                                                                        \
    __asm__("addc.s %[dc_wr64], %[ra_r32], %[rb_wr32], " add_nz_cc ", " pc ""                                                    \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_addc_s_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("addc.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_addc_s_rrr(dc, ra, rb)                                                                                         \
    __asm__("addc.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_extsh_s_rrci(dc, ra, log_nz_cc, pc)                                                                            \
    __asm__("extsh.s %[dc_wr64], %[ra_r32], " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_extsh_s_rrc(dc, ra, log_set_cc)                                                                                \
    __asm__("extsh.s %[dc_wr64], %[ra_r32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_extsh_s_rr(dc, ra) __asm__("extsh.s %[dc_wr64], %[ra_r32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nxor_s_rrici(dc, ra, imm, log_nz_cc, pc)                                                                       \
    __asm__("nxor.s %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nxor_s_rric(dc, ra, imm, log_set_cc)                                                                           \
    __asm__("nxor.s %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nxor_s_rrif(dc, ra, imm, false_cc)                                                                             \
    __asm__("nxor.s %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nxor_s_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                        \
    __asm__("nxor.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                    \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_nxor_s_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("nxor.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_nxor_s_rrr(dc, ra, rb)                                                                                         \
    __asm__("nxor.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_cmpb4_u_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                       \
    __asm__("cmpb4.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                   \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_cmpb4_u_rrrc(dc, ra, rb, log_set_cc)                                                                           \
    __asm__("cmpb4.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                          \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_cmpb4_u_rrr(dc, ra, rb)                                                                                        \
    __asm__("cmpb4.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl1x_s_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                              \
    __asm__("lsl1x.s %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1x_s_rric(dc, ra, shift, log_set_cc)                                                                        \
    __asm__("lsl1x.s %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1x_s_rri(dc, ra, shift)                                                                                     \
    __asm__("lsl1x.s %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1x_s_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                     \
    __asm__("lsl1x.s %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                 \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl1x_s_rrrc(dc, ra, rb, log_set_cc)                                                                           \
    __asm__("lsl1x.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                          \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl1x_s_rrr(dc, ra, rb)                                                                                        \
    __asm__("lsl1x.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl_sub_rrrici(rc, rb, ra, shift, div_nz_cc, pc)                                                               \
    __asm__("lsl_sub %[rc_wr32], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc ""                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [rb_wr32] "r"(rb), [ra_r32] "r"(ra)                                                                                \
            :)

#define __builtin_lsl_sub_zrrici(zero, rb, ra, shift, div_nz_cc, pc)                                                             \
    __asm__("lsl_sub %[zero], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc "" ::[rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_lsl_sub_rrri(rc, rb, ra, shift)                                                                                \
    __asm__("lsl_sub %[rc_wr32], %[rb_wr32], %[ra_r32], " shift "" : [rc_wr32] "=r"(rc) : [rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_lsl_sub_zrri(zero, rb, ra, shift)                                                                              \
    __asm__("lsl_sub %[zero], %[rb_wr32], %[ra_r32], " shift "" ::[rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_ror_rrici(rc, ra, shift, imm_shift_nz_cc, pc)                                                                  \
    __asm__("ror %[rc_wr32], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_ror_zrici(zero, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("ror %[zero], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_ror_rric(rc, ra, shift, log_set_cc)                                                                            \
    __asm__("ror %[rc_wr32], %[ra_r32], " shift ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_ror_zric(zero, ra, shift, log_set_cc)                                                                          \
    __asm__("ror %[zero], %[ra_r32], " shift ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_ror_rri(rc, ra, shift) __asm__("ror %[rc_wr32], %[ra_r32], " shift "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_ror_zri(zero, ra, shift) __asm__("ror %[zero], %[ra_r32], " shift "" ::[ra_r32] "r"(ra) :)

#define __builtin_ror_rrrci(rc, ra, rb, shift_nz_cc, pc)                                                                         \
    __asm__("ror %[rc_wr32], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                     \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_ror_zrrci(zero, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("ror %[zero], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_ror_rrrc(rc, ra, rb, log_set_cc)                                                                               \
    __asm__("ror %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_ror_zrrc(zero, ra, rb, log_set_cc)                                                                             \
    __asm__("ror %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_ror_rrr(rc, ra, rb)                                                                                            \
    __asm__("ror %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_ror_zrr(zero, ra, rb) __asm__("ror %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_fault_i(imm) __asm__("fault " imm "" :::)

#define __builtin_clz_s_rrci(dc, ra, count_nz_cc, pc)                                                                            \
    __asm__("clz.s %[dc_wr64], %[ra_r32], " count_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_clz_s_rrc(dc, ra, log_set_cc)                                                                                  \
    __asm__("clz.s %[dc_wr64], %[ra_r32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_clz_s_rr(dc, ra) __asm__("clz.s %[dc_wr64], %[ra_r32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_u_rirci(dc, imm, ra, sub_nz_cc, pc)                                                                        \
    __asm__("sub.u %[dc_wr64], " imm ", %[ra_r32], " sub_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_u_rirc(dc, imm, ra, sub_set_cc)                                                                            \
    __asm__("sub.u %[dc_wr64], " imm ", %[ra_r32], " sub_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_u_rirf(dc, imm, ra, false_cc)                                                                              \
    __asm__("sub.u %[dc_wr64], " imm ", %[ra_r32], " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_u_rrici(dc, ra, imm, sub_nz_cc, pc)                                                                        \
    __asm__("sub.u %[dc_wr64], %[ra_r32], " imm ", " sub_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_u_rric(dc, ra, imm, ext_sub_set_cc)                                                                        \
    __asm__("sub.u %[dc_wr64], %[ra_r32], " imm ", " ext_sub_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_u_rrif(dc, ra, imm, false_cc)                                                                              \
    __asm__("sub.u %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sub_u_rrrci(dc, ra, rb, sub_nz_cc, pc)                                                                         \
    __asm__("sub.u %[dc_wr64], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc ""                                                     \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_sub_u_rrrc(dc, ra, rb, ext_sub_set_cc)                                                                         \
    __asm__("sub.u %[dc_wr64], %[ra_r32], %[rb_wr32], " ext_sub_set_cc ""                                                        \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_sub_u_rrr(dc, ra, rb)                                                                                          \
    __asm__("sub.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_uh_uh_u_rrrci(dc, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_uh_uh.u %[dc_wr64], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                               \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_uh_uh_u_rrrc(dc, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_uh_uh.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_uh_uh_u_rrr(dc, ra, rb)                                                                                    \
    __asm__("mul_uh_uh.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_sl_s_rrrci(dc, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sh_sl.s %[dc_wr64], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                               \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_sl_s_rrrc(dc, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sh_sl.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_sl_s_rrr(dc, ra, rb)                                                                                    \
    __asm__("mul_sh_sl.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl_add_s_rrrici(dc, rb, ra, shift, div_nz_cc, pc)                                                             \
    __asm__("lsl_add.s %[dc_wr64], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc ""                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [rb_wr32] "r"(rb), [ra_r32] "r"(ra)                                                                                \
            :)

#define __builtin_lsl_add_s_rrri(dc, rb, ra, shift)                                                                              \
    __asm__("lsl_add.s %[dc_wr64], %[rb_wr32], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_mul_sh_ul_rrrci(rc, ra, rb, mul_nz_cc, pc)                                                                     \
    __asm__("mul_sh_ul %[rc_wr32], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                                 \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_ul_zrrci(zero, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sh_ul %[zero], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_ul_rrrc(rc, ra, rb, log_set_cc)                                                                         \
    __asm__("mul_sh_ul %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_ul_zrrc(zero, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sh_ul %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_ul_rrr(rc, ra, rb)                                                                                      \
    __asm__("mul_sh_ul %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_ul_zrr(zero, ra, rb)                                                                                    \
    __asm__("mul_sh_ul %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_or_s_rri(dc, rb, imm) __asm__("or.s %[dc_wr64], %[rb_wr32], " imm "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb) :)

#define __builtin_or_s_rrici(dc, ra, imm, log_nz_cc, pc)                                                                         \
    __asm__("or.s %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_or_s_rric(dc, ra, imm, log_set_cc)                                                                             \
    __asm__("or.s %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_or_s_rrif(dc, ra, imm, false_cc)                                                                               \
    __asm__("or.s %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_or_s_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                          \
    __asm__("or.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_or_s_rrrc(dc, ra, rb, log_set_cc)                                                                              \
    __asm__("or.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_or_s_rrr(dc, ra, rb)                                                                                           \
    __asm__("or.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_sats_rrci(rc, ra, log_nz_cc, pc)                                                                               \
    __asm__("sats %[rc_wr32], %[ra_r32], " log_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_sats_zrci(zero, ra, log_nz_cc, pc)                                                                             \
    __asm__("sats %[zero], %[ra_r32], " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_sats_rrc(rc, ra, log_set_cc)                                                                                   \
    __asm__("sats %[rc_wr32], %[ra_r32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_sats_zrc(zero, ra, log_set_cc) __asm__("sats %[zero], %[ra_r32], " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_sats_rr(rc, ra) __asm__("sats %[rc_wr32], %[ra_r32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_sats_zr(zero, ra) __asm__("sats %[zero], %[ra_r32]" ::[ra_r32] "r"(ra) :)

#define __builtin_rsub_u_rrrci(dc, ra, rb, sub_nz_cc, pc)                                                                        \
    __asm__("rsub.u %[dc_wr64], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc ""                                                    \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rsub_u_rrrc(dc, ra, rb, sub_set_cc)                                                                            \
    __asm__("rsub.u %[dc_wr64], %[ra_r32], %[rb_wr32], " sub_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rsub_u_rrr(dc, ra, rb)                                                                                         \
    __asm__("rsub.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lw_erri(endian, rc, ra, off)                                                                                   \
    __asm__("lw " endian ", %[rc_wr32], %[ra_r32], " off "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lw_ersi(endian, rc, sa, off)                                                                                   \
    __asm__("lw " endian ", %[rc_wr32], %[sa_r32], " off "" : [rc_wr32] "=r"(rc) : [sa_r32] "r"(sa) :)

#define __builtin_extsb_s_rrci(dc, ra, log_nz_cc, pc)                                                                            \
    __asm__("extsb.s %[dc_wr64], %[ra_r32], " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_extsb_s_rrc(dc, ra, log_set_cc)                                                                                \
    __asm__("extsb.s %[dc_wr64], %[ra_r32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_extsb_s_rr(dc, ra) __asm__("extsb.s %[dc_wr64], %[ra_r32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_ror_s_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("ror.s %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_ror_s_rric(dc, ra, shift, log_set_cc)                                                                          \
    __asm__("ror.s %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_ror_s_rri(dc, ra, shift)                                                                                       \
    __asm__("ror.s %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_ror_s_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("ror.s %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                   \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_ror_s_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("ror.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_ror_s_rrr(dc, ra, rb)                                                                                          \
    __asm__("ror.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_ul_rrrci(rc, ra, rb, mul_nz_cc, pc)                                                                     \
    __asm__("mul_sl_ul %[rc_wr32], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                                 \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_ul_zrrci(zero, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sl_ul %[zero], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_ul_rrrc(rc, ra, rb, log_set_cc)                                                                         \
    __asm__("mul_sl_ul %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_ul_zrrc(zero, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sl_ul %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_ul_rrr(rc, ra, rb)                                                                                      \
    __asm__("mul_sl_ul %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_ul_zrr(zero, ra, rb)                                                                                    \
    __asm__("mul_sl_ul %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_time_cfg_s_rrci(dc, rb, true_cc, pc)                                                                           \
    __asm__("time_cfg.s %[dc_wr64], %[rb_wr32], " true_cc ", " pc "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb) :)

#define __builtin_time_cfg_s_rr(dc, rb) __asm__("time_cfg.s %[dc_wr64], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_ul_s_rrrci(dc, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sh_ul.s %[dc_wr64], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                               \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_ul_s_rrrc(dc, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sh_ul.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_ul_s_rrr(dc, ra, rb)                                                                                    \
    __asm__("mul_sh_ul.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rsubc_u_rrrci(dc, ra, rb, sub_nz_cc, pc)                                                                       \
    __asm__("rsubc.u %[dc_wr64], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc ""                                                   \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rsubc_u_rrrc(dc, ra, rb, sub_set_cc)                                                                           \
    __asm__("rsubc.u %[dc_wr64], %[ra_r32], %[rb_wr32], " sub_set_cc ""                                                          \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rsubc_u_rrr(dc, ra, rb)                                                                                        \
    __asm__("rsubc.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rol_add_rrrici(rc, rb, ra, shift, div_nz_cc, pc)                                                               \
    __asm__("rol_add %[rc_wr32], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc ""                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [rb_wr32] "r"(rb), [ra_r32] "r"(ra)                                                                                \
            :)

#define __builtin_rol_add_zrrici(zero, rb, ra, shift, div_nz_cc, pc)                                                             \
    __asm__("rol_add %[zero], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc "" ::[rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_rol_add_rrri(rc, rb, ra, shift)                                                                                \
    __asm__("rol_add %[rc_wr32], %[rb_wr32], %[ra_r32], " shift "" : [rc_wr32] "=r"(rc) : [rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_rol_add_zrri(zero, rb, ra, shift)                                                                              \
    __asm__("rol_add %[zero], %[rb_wr32], %[ra_r32], " shift "" ::[rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_cao_rrci(rc, ra, count_nz_cc, pc)                                                                              \
    __asm__("cao %[rc_wr32], %[ra_r32], " count_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_cao_zrci(zero, ra, count_nz_cc, pc)                                                                            \
    __asm__("cao %[zero], %[ra_r32], " count_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_cao_rrc(rc, ra, log_set_cc)                                                                                    \
    __asm__("cao %[rc_wr32], %[ra_r32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_cao_zrc(zero, ra, log_set_cc) __asm__("cao %[zero], %[ra_r32], " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_cao_rr(rc, ra) __asm__("cao %[rc_wr32], %[ra_r32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_cao_zr(zero, ra) __asm__("cao %[zero], %[ra_r32]" ::[ra_r32] "r"(ra) :)

#define __builtin_extuh_rrci(rc, ra, log_nz_cc, pc)                                                                              \
    __asm__("extuh %[rc_wr32], %[ra_r32], " log_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_extuh_zrci(zero, ra, log_nz_cc, pc)                                                                            \
    __asm__("extuh %[zero], %[ra_r32], " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_extuh_rrc(rc, ra, log_set_cc)                                                                                  \
    __asm__("extuh %[rc_wr32], %[ra_r32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_extuh_zrc(zero, ra, log_set_cc) __asm__("extuh %[zero], %[ra_r32], " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_extuh_rr(rc, ra) __asm__("extuh %[rc_wr32], %[ra_r32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_extuh_zr(zero, ra) __asm__("extuh %[zero], %[ra_r32]" ::[ra_r32] "r"(ra) :)

#define __builtin_mul_sl_sh_s_rrrci(dc, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sl_sh.s %[dc_wr64], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                               \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_sh_s_rrrc(dc, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sl_sh.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_sh_s_rrr(dc, ra, rb)                                                                                    \
    __asm__("mul_sl_sh.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl1_u_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                               \
    __asm__("lsl1.u %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1_u_rric(dc, ra, shift, log_set_cc)                                                                         \
    __asm__("lsl1.u %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1_u_rri(dc, ra, shift)                                                                                      \
    __asm__("lsl1.u %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1_u_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                      \
    __asm__("lsl1.u %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                  \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl1_u_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("lsl1.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl1_u_rrr(dc, ra, rb)                                                                                         \
    __asm__("lsl1.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_orn_s_rrici(dc, ra, imm, log_nz_cc, pc)                                                                        \
    __asm__("orn.s %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_orn_s_rric(dc, ra, imm, log_set_cc)                                                                            \
    __asm__("orn.s %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_orn_s_rrif(dc, ra, imm, false_cc)                                                                              \
    __asm__("orn.s %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_orn_s_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                         \
    __asm__("orn.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                     \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_orn_s_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("orn.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_orn_s_rrr(dc, ra, rb)                                                                                          \
    __asm__("orn.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lw_u_erri(endian, dc, ra, off)                                                                                 \
    __asm__("lw.u " endian ", %[dc_wr64], %[ra_r32], " off "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_mul_sl_uh_s_rrrci(dc, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sl_uh.s %[dc_wr64], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                               \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_uh_s_rrrc(dc, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sl_uh.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_uh_s_rrr(dc, ra, rb)                                                                                    \
    __asm__("mul_sl_uh.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lslx_u_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                               \
    __asm__("lslx.u %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lslx_u_rric(dc, ra, shift, log_set_cc)                                                                         \
    __asm__("lslx.u %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lslx_u_rri(dc, ra, shift)                                                                                      \
    __asm__("lslx.u %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lslx_u_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                      \
    __asm__("lslx.u %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                  \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lslx_u_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("lslx.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lslx_u_rrr(dc, ra, rb)                                                                                         \
    __asm__("lslx.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nand_s_rrici(dc, ra, imm, log_nz_cc, pc)                                                                       \
    __asm__("nand.s %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nand_s_rric(dc, ra, imm, log_set_cc)                                                                           \
    __asm__("nand.s %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nand_s_rrif(dc, ra, imm, false_cc)                                                                             \
    __asm__("nand.s %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nand_s_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                        \
    __asm__("nand.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                    \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_nand_s_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("nand.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_nand_s_rrr(dc, ra, rb)                                                                                         \
    __asm__("nand.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr1_u_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                               \
    __asm__("lsr1.u %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1_u_rric(dc, ra, shift, log_set_cc)                                                                         \
    __asm__("lsr1.u %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1_u_rri(dc, ra, shift)                                                                                      \
    __asm__("lsr1.u %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1_u_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                      \
    __asm__("lsr1.u %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                  \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr1_u_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("lsr1.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr1_u_rrr(dc, ra, rb)                                                                                         \
    __asm__("lsr1.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_and_u_rki(dc, ra, imm) __asm__("and.u %[dc_wr64], %[ra_r32], " imm "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_and_u_rri(dc, rb, imm)                                                                                         \
    __asm__("and.u %[dc_wr64], %[rb_wr32], " imm "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb) :)

#define __builtin_and_u_rrici(dc, ra, imm, log_nz_cc, pc)                                                                        \
    __asm__("and.u %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_and_u_rric(dc, ra, imm, log_set_cc)                                                                            \
    __asm__("and.u %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_and_u_rrif(dc, ra, imm, false_cc)                                                                              \
    __asm__("and.u %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_and_u_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                         \
    __asm__("and.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                     \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_and_u_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("and.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_and_u_rrr(dc, ra, rb)                                                                                          \
    __asm__("and.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_orn_rrici(rc, ra, imm, log_nz_cc, pc)                                                                          \
    __asm__("orn %[rc_wr32], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_orn_zrici(zero, ra, imm, log_nz_cc, pc)                                                                        \
    __asm__("orn %[zero], %[ra_r32], " imm ", " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_orn_rric(rc, ra, imm, log_set_cc)                                                                              \
    __asm__("orn %[rc_wr32], %[ra_r32], " imm ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_orn_zric(zero, ra, imm, log_set_cc)                                                                            \
    __asm__("orn %[zero], %[ra_r32], " imm ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_orn_rrif(rc, ra, imm, false_cc)                                                                                \
    __asm__("orn %[rc_wr32], %[ra_r32], " imm ", " false_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_orn_zrif(zero, ra, imm, false_cc) __asm__("orn %[zero], %[ra_r32], " imm ", " false_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_orn_rrrci(rc, ra, rb, log_nz_cc, pc)                                                                           \
    __asm__("orn %[rc_wr32], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                       \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_orn_zrrci(zero, ra, rb, log_nz_cc, pc)                                                                         \
    __asm__("orn %[zero], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_orn_rrrc(rc, ra, rb, log_set_cc)                                                                               \
    __asm__("orn %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_orn_zrrc(zero, ra, rb, log_set_cc)                                                                             \
    __asm__("orn %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_orn_rrr(rc, ra, rb)                                                                                            \
    __asm__("orn %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_orn_zrr(zero, ra, rb) __asm__("orn %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_clo_rrci(rc, ra, count_nz_cc, pc)                                                                              \
    __asm__("clo %[rc_wr32], %[ra_r32], " count_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_clo_zrci(zero, ra, count_nz_cc, pc)                                                                            \
    __asm__("clo %[zero], %[ra_r32], " count_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_clo_rrc(rc, ra, log_set_cc)                                                                                    \
    __asm__("clo %[rc_wr32], %[ra_r32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_clo_zrc(zero, ra, log_set_cc) __asm__("clo %[zero], %[ra_r32], " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_clo_rr(rc, ra) __asm__("clo %[rc_wr32], %[ra_r32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_clo_zr(zero, ra) __asm__("clo %[zero], %[ra_r32]" ::[ra_r32] "r"(ra) :)

#define __builtin_rol_s_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("rol.s %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_rol_s_rric(dc, ra, shift, log_set_cc)                                                                          \
    __asm__("rol.s %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_rol_s_rri(dc, ra, shift)                                                                                       \
    __asm__("rol.s %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_rol_s_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("rol.s %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                   \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rol_s_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("rol.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rol_s_rrr(dc, ra, rb)                                                                                          \
    __asm__("rol.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_sh_rrrci(rc, ra, rb, mul_nz_cc, pc)                                                                     \
    __asm__("mul_sh_sh %[rc_wr32], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                                 \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_sh_zrrci(zero, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sh_sh %[zero], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_sh_rrrc(rc, ra, rb, log_set_cc)                                                                         \
    __asm__("mul_sh_sh %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_sh_zrrc(zero, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sh_sh %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_sh_rrr(rc, ra, rb)                                                                                      \
    __asm__("mul_sh_sh %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_sh_zrr(zero, ra, rb)                                                                                    \
    __asm__("mul_sh_sh %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rol_add_u_rrrici(dc, rb, ra, shift, div_nz_cc, pc)                                                             \
    __asm__("rol_add.u %[dc_wr64], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc ""                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [rb_wr32] "r"(rb), [ra_r32] "r"(ra)                                                                                \
            :)

#define __builtin_rol_add_u_rrri(dc, rb, ra, shift)                                                                              \
    __asm__("rol_add.u %[dc_wr64], %[rb_wr32], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_lsr_add_rrrici(rc, rb, ra, shift, div_nz_cc, pc)                                                               \
    __asm__("lsr_add %[rc_wr32], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc ""                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [rb_wr32] "r"(rb), [ra_r32] "r"(ra)                                                                                \
            :)

#define __builtin_lsr_add_zrrici(zero, rb, ra, shift, div_nz_cc, pc)                                                             \
    __asm__("lsr_add %[zero], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc "" ::[rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_lsr_add_rrri(rc, rb, ra, shift)                                                                                \
    __asm__("lsr_add %[rc_wr32], %[rb_wr32], %[ra_r32], " shift "" : [rc_wr32] "=r"(rc) : [rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_lsr_add_zrri(zero, rb, ra, shift)                                                                              \
    __asm__("lsr_add %[zero], %[rb_wr32], %[ra_r32], " shift "" ::[rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_hash_s_rrici(dc, ra, imm, log_nz_cc, pc)                                                                       \
    __asm__("hash.s %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_hash_s_rric(dc, ra, imm, log_set_cc)                                                                           \
    __asm__("hash.s %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_hash_s_rrif(dc, ra, imm, false_cc)                                                                             \
    __asm__("hash.s %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_hash_s_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                        \
    __asm__("hash.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                    \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_hash_s_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("hash.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_hash_s_rrr(dc, ra, rb)                                                                                         \
    __asm__("hash.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_extub_rrci(rc, ra, log_nz_cc, pc)                                                                              \
    __asm__("extub %[rc_wr32], %[ra_r32], " log_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_extub_zrci(zero, ra, log_nz_cc, pc)                                                                            \
    __asm__("extub %[zero], %[ra_r32], " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_extub_rrc(rc, ra, log_set_cc)                                                                                  \
    __asm__("extub %[rc_wr32], %[ra_r32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_extub_zrc(zero, ra, log_set_cc) __asm__("extub %[zero], %[ra_r32], " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_extub_rr(rc, ra) __asm__("extub %[rc_wr32], %[ra_r32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_extub_zr(zero, ra) __asm__("extub %[zero], %[ra_r32]" ::[ra_r32] "r"(ra) :)

#define __builtin_sw_id_erii(endian, ra, off, imm) __asm__("sw_id " endian ", %[ra_r32], " off ", " imm "" ::[ra_r32] "r"(ra) :)

#define __builtin_time_rci(rc, true_cc, pc) __asm__("time %[rc_wr32], " true_cc ", " pc "" : [rc_wr32] "=r"(rc)::)

#define __builtin_time_zci(zero, true_cc, pc) __asm__("time %[zero], " true_cc ", " pc "" :::)

#define __builtin_time_r(rc) __asm__("time %[rc_wr32]" : [rc_wr32] "=r"(rc)::)

#define __builtin_time_z(zero) __asm__("time %[zero]" :::)

#define __builtin_asr_rrici(rc, ra, shift, imm_shift_nz_cc, pc)                                                                  \
    __asm__("asr %[rc_wr32], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_asr_zrici(zero, ra, shift, imm_shift_nz_cc, pc)                                                                \
    __asm__("asr %[zero], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_asr_rric(rc, ra, shift, log_set_cc)                                                                            \
    __asm__("asr %[rc_wr32], %[ra_r32], " shift ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_asr_zric(zero, ra, shift, log_set_cc)                                                                          \
    __asm__("asr %[zero], %[ra_r32], " shift ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_asr_rri(rc, ra, shift) __asm__("asr %[rc_wr32], %[ra_r32], " shift "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_asr_zri(zero, ra, shift) __asm__("asr %[zero], %[ra_r32], " shift "" ::[ra_r32] "r"(ra) :)

#define __builtin_asr_rrrci(rc, ra, rb, shift_nz_cc, pc)                                                                         \
    __asm__("asr %[rc_wr32], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                     \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_asr_zrrci(zero, ra, rb, shift_nz_cc, pc)                                                                       \
    __asm__("asr %[zero], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_asr_rrrc(rc, ra, rb, log_set_cc)                                                                               \
    __asm__("asr %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_asr_zrrc(zero, ra, rb, log_set_cc)                                                                             \
    __asm__("asr %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_asr_rrr(rc, ra, rb)                                                                                            \
    __asm__("asr %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_asr_zrr(zero, ra, rb) __asm__("asr %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_ldma_rri(ra, rb, immDma)                                                                                       \
    __asm__("ldma %[ra_r32], %[rb_wr32], " immDma "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_ld_erri(endian, dc, ra, off)                                                                                   \
    __asm__("ld " endian ", %[dc_wr64], %[ra_r32], " off "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_ld_ersi(endian, dc, sa, off)                                                                                   \
    __asm__("ld " endian ", %[dc_wr64], %[sa_r32], " off "" : [dc_wr64] "=r"(dc) : [sa_r32] "r"(sa) :)

#define __builtin_cls_s_rrci(dc, ra, count_nz_cc, pc)                                                                            \
    __asm__("cls.s %[dc_wr64], %[ra_r32], " count_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_cls_s_rrc(dc, ra, log_set_cc)                                                                                  \
    __asm__("cls.s %[dc_wr64], %[ra_r32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_cls_s_rr(dc, ra) __asm__("cls.s %[dc_wr64], %[ra_r32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_extuh_u_rrci(dc, ra, log_nz_cc, pc)                                                                            \
    __asm__("extuh.u %[dc_wr64], %[ra_r32], " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_extuh_u_rrc(dc, ra, log_set_cc)                                                                                \
    __asm__("extuh.u %[dc_wr64], %[ra_r32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_extuh_u_rr(dc, ra) __asm__("extuh.u %[dc_wr64], %[ra_r32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sats_u_rrci(dc, ra, log_nz_cc, pc)                                                                             \
    __asm__("sats.u %[dc_wr64], %[ra_r32], " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sats_u_rrc(dc, ra, log_set_cc)                                                                                 \
    __asm__("sats.u %[dc_wr64], %[ra_r32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_sats_u_rr(dc, ra) __asm__("sats.u %[dc_wr64], %[ra_r32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_addc_u_rrici(dc, ra, imm, add_nz_cc, pc)                                                                       \
    __asm__("addc.u %[dc_wr64], %[ra_r32], " imm ", " add_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_addc_u_rric(dc, ra, imm, log_set_cc)                                                                           \
    __asm__("addc.u %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_addc_u_rrif(dc, ra, imm, false_cc)                                                                             \
    __asm__("addc.u %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_addc_u_rrrci(dc, ra, rb, add_nz_cc, pc)                                                                        \
    __asm__("addc.u %[dc_wr64], %[ra_r32], %[rb_wr32], " add_nz_cc ", " pc ""                                                    \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_addc_u_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("addc.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_addc_u_rrr(dc, ra, rb)                                                                                         \
    __asm__("addc.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_andn_u_rrici(dc, ra, imm, log_nz_cc, pc)                                                                       \
    __asm__("andn.u %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_andn_u_rric(dc, ra, imm, log_set_cc)                                                                           \
    __asm__("andn.u %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_andn_u_rrif(dc, ra, imm, false_cc)                                                                             \
    __asm__("andn.u %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_andn_u_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                        \
    __asm__("andn.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                    \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_andn_u_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("andn.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_andn_u_rrr(dc, ra, rb)                                                                                         \
    __asm__("andn.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nxor_u_rrici(dc, ra, imm, log_nz_cc, pc)                                                                       \
    __asm__("nxor.u %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nxor_u_rric(dc, ra, imm, log_set_cc)                                                                           \
    __asm__("nxor.u %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nxor_u_rrif(dc, ra, imm, false_cc)                                                                             \
    __asm__("nxor.u %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nxor_u_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                        \
    __asm__("nxor.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                    \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_nxor_u_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("nxor.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_nxor_u_rrr(dc, ra, rb)                                                                                         \
    __asm__("nxor.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsl_sub_u_rrrici(dc, rb, ra, shift, div_nz_cc, pc)                                                             \
    __asm__("lsl_sub.u %[dc_wr64], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc ""                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [rb_wr32] "r"(rb), [ra_r32] "r"(ra)                                                                                \
            :)

#define __builtin_lsl_sub_u_rrri(dc, rb, ra, shift)                                                                              \
    __asm__("lsl_sub.u %[dc_wr64], %[rb_wr32], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_lsl1x_u_rrici(dc, ra, shift, imm_shift_nz_cc, pc)                                                              \
    __asm__("lsl1x.u %[dc_wr64], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1x_u_rric(dc, ra, shift, log_set_cc)                                                                        \
    __asm__("lsl1x.u %[dc_wr64], %[ra_r32], " shift ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1x_u_rri(dc, ra, shift)                                                                                     \
    __asm__("lsl1x.u %[dc_wr64], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsl1x_u_rrrci(dc, ra, rb, shift_nz_cc, pc)                                                                     \
    __asm__("lsl1x.u %[dc_wr64], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                 \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl1x_u_rrrc(dc, ra, rb, log_set_cc)                                                                           \
    __asm__("lsl1x.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                          \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsl1x_u_rrr(dc, ra, rb)                                                                                        \
    __asm__("lsl1x.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_resume_rici(ra, imm, boot_cc, pc) __asm__("resume %[ra_r32], " imm ", " boot_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lhs_erri(endian, rc, ra, off)                                                                                  \
    __asm__("lhs " endian ", %[rc_wr32], %[ra_r32], " off "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lhs_ersi(endian, rc, sa, off)                                                                                  \
    __asm__("lhs " endian ", %[rc_wr32], %[sa_r32], " off "" : [rc_wr32] "=r"(rc) : [sa_r32] "r"(sa) :)

#define __builtin_cao_s_rrci(dc, ra, count_nz_cc, pc)                                                                            \
    __asm__("cao.s %[dc_wr64], %[ra_r32], " count_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_cao_s_rrc(dc, ra, log_set_cc)                                                                                  \
    __asm__("cao.s %[dc_wr64], %[ra_r32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_cao_s_rr(dc, ra) __asm__("cao.s %[dc_wr64], %[ra_r32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_clz_u_rrci(dc, ra, count_nz_cc, pc)                                                                            \
    __asm__("clz.u %[dc_wr64], %[ra_r32], " count_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_clz_u_rrc(dc, ra, log_set_cc)                                                                                  \
    __asm__("clz.u %[dc_wr64], %[ra_r32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_clz_u_rr(dc, ra) __asm__("clz.u %[dc_wr64], %[ra_r32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1_rrici(rc, ra, shift, imm_shift_nz_cc, pc)                                                                 \
    __asm__("lsr1 %[rc_wr32], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1_zrici(zero, ra, shift, imm_shift_nz_cc, pc)                                                               \
    __asm__("lsr1 %[zero], %[ra_r32], " shift ", " imm_shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsr1_rric(rc, ra, shift, log_set_cc)                                                                           \
    __asm__("lsr1 %[rc_wr32], %[ra_r32], " shift ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1_zric(zero, ra, shift, log_set_cc)                                                                         \
    __asm__("lsr1 %[zero], %[ra_r32], " shift ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsr1_rri(rc, ra, shift)                                                                                        \
    __asm__("lsr1 %[rc_wr32], %[ra_r32], " shift "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lsr1_zri(zero, ra, shift) __asm__("lsr1 %[zero], %[ra_r32], " shift "" ::[ra_r32] "r"(ra) :)

#define __builtin_lsr1_rrrci(rc, ra, rb, shift_nz_cc, pc)                                                                        \
    __asm__("lsr1 %[rc_wr32], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc ""                                                    \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_lsr1_zrrci(zero, ra, rb, shift_nz_cc, pc)                                                                      \
    __asm__("lsr1 %[zero], %[ra_r32], %[rb_wr32], " shift_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr1_rrrc(rc, ra, rb, log_set_cc)                                                                              \
    __asm__("lsr1 %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr1_zrrc(zero, ra, rb, log_set_cc)                                                                            \
    __asm__("lsr1 %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr1_rrr(rc, ra, rb)                                                                                           \
    __asm__("lsr1 %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr1_zrr(zero, ra, rb) __asm__("lsr1 %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_add_u_rri(dc, rb, imm)                                                                                         \
    __asm__("add.u %[dc_wr64], %[rb_wr32], " imm "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb) :)

#define __builtin_add_u_rrici(dc, ra, imm, add_nz_cc, pc)                                                                        \
    __asm__("add.u %[dc_wr64], %[ra_r32], " imm ", " add_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_add_u_rric(dc, ra, imm, log_set_cc)                                                                            \
    __asm__("add.u %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_add_u_rrif(dc, ra, imm, false_cc)                                                                              \
    __asm__("add.u %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_add_u_rrrci(dc, ra, rb, add_nz_cc, pc)                                                                         \
    __asm__("add.u %[dc_wr64], %[ra_r32], %[rb_wr32], " add_nz_cc ", " pc ""                                                     \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_add_u_rrrc(dc, ra, rb, log_set_cc)                                                                             \
    __asm__("add.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                            \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_add_u_rrr(dc, ra, rb)                                                                                          \
    __asm__("add.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rsubc_rrrci(rc, ra, rb, sub_nz_cc, pc)                                                                         \
    __asm__("rsubc %[rc_wr32], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc ""                                                     \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rsubc_zrrci(zero, ra, rb, sub_nz_cc, pc)                                                                       \
    __asm__("rsubc %[zero], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rsubc_rrrc(rc, ra, rb, sub_set_cc)                                                                             \
    __asm__("rsubc %[rc_wr32], %[ra_r32], %[rb_wr32], " sub_set_cc ""                                                            \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_rsubc_zrrc(zero, ra, rb, sub_set_cc)                                                                           \
    __asm__("rsubc %[zero], %[ra_r32], %[rb_wr32], " sub_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rsubc_rrr(rc, ra, rb)                                                                                          \
    __asm__("rsubc %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_rsubc_zrr(zero, ra, rb) __asm__("rsubc %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_add_rri(rc, ra, imm) __asm__("add %[rc_wr32], %[ra_r32], " imm "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_add_zri(zero, rb, imm) __asm__("add %[zero], %[rb_wr32], " imm "" ::[rb_wr32] "r"(rb) :)

#define __builtin_add_rrici(rc, ra, imm, add_nz_cc, pc)                                                                          \
    __asm__("add %[rc_wr32], %[ra_r32], " imm ", " add_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_add_zrici(zero, ra, imm, add_nz_cc, pc)                                                                        \
    __asm__("add %[zero], %[ra_r32], " imm ", " add_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_add_rric(rc, ra, imm, log_set_cc)                                                                              \
    __asm__("add %[rc_wr32], %[ra_r32], " imm ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_add_zric(zero, ra, imm, log_set_cc)                                                                            \
    __asm__("add %[zero], %[ra_r32], " imm ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_add_rrif(rc, ra, imm, false_cc)                                                                                \
    __asm__("add %[rc_wr32], %[ra_r32], " imm ", " false_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_add_zrif(zero, ra, imm, false_cc) __asm__("add %[zero], %[ra_r32], " imm ", " false_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_add_ssi(sc, sa, imm) __asm__("add %[sc_wr32], %[sa_r32], " imm "" ::[sc_wr32] "r"(sc), [sa_r32] "r"(sa) :)

#define __builtin_add_rrrci(rc, ra, rb, add_nz_cc, pc)                                                                           \
    __asm__("add %[rc_wr32], %[ra_r32], %[rb_wr32], " add_nz_cc ", " pc ""                                                       \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_add_zrrci(zero, ra, rb, add_nz_cc, pc)                                                                         \
    __asm__("add %[zero], %[ra_r32], %[rb_wr32], " add_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_add_rrrc(rc, ra, rb, log_set_cc)                                                                               \
    __asm__("add %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_add_zrrc(zero, ra, rb, log_set_cc)                                                                             \
    __asm__("add %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_add_rrr(rc, ra, rb)                                                                                            \
    __asm__("add %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_add_zrr(zero, ra, rb) __asm__("add %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_add_sss(sc, sa, sb)                                                                                            \
    __asm__("add %[sc_wr32], %[sa_r32], %[sb_wr32]" ::[sc_wr32] "r"(sc), [sa_r32] "r"(sa), [sb_wr32] "r"(sb) :)

#define __builtin_nor_rrici(rc, ra, imm, log_nz_cc, pc)                                                                          \
    __asm__("nor %[rc_wr32], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_nor_zrici(zero, ra, imm, log_nz_cc, pc)                                                                        \
    __asm__("nor %[zero], %[ra_r32], " imm ", " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_nor_rric(rc, ra, imm, log_set_cc)                                                                              \
    __asm__("nor %[rc_wr32], %[ra_r32], " imm ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_nor_zric(zero, ra, imm, log_set_cc)                                                                            \
    __asm__("nor %[zero], %[ra_r32], " imm ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_nor_rrif(rc, ra, imm, false_cc)                                                                                \
    __asm__("nor %[rc_wr32], %[ra_r32], " imm ", " false_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_nor_zrif(zero, ra, imm, false_cc) __asm__("nor %[zero], %[ra_r32], " imm ", " false_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_nor_rrrci(rc, ra, rb, log_nz_cc, pc)                                                                           \
    __asm__("nor %[rc_wr32], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                       \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_nor_zrrci(zero, ra, rb, log_nz_cc, pc)                                                                         \
    __asm__("nor %[zero], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nor_rrrc(rc, ra, rb, log_set_cc)                                                                               \
    __asm__("nor %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nor_zrrc(zero, ra, rb, log_set_cc)                                                                             \
    __asm__("nor %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nor_rrr(rc, ra, rb)                                                                                            \
    __asm__("nor %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_nor_zrr(zero, ra, rb) __asm__("nor %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_or_u_rri(dc, rb, imm) __asm__("or.u %[dc_wr64], %[rb_wr32], " imm "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb) :)

#define __builtin_or_u_rrici(dc, ra, imm, log_nz_cc, pc)                                                                         \
    __asm__("or.u %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_or_u_rric(dc, ra, imm, log_set_cc)                                                                             \
    __asm__("or.u %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_or_u_rrif(dc, ra, imm, false_cc)                                                                               \
    __asm__("or.u %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_or_u_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                          \
    __asm__("or.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_or_u_rrrc(dc, ra, rb, log_set_cc)                                                                              \
    __asm__("or.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_or_u_rrr(dc, ra, rb)                                                                                           \
    __asm__("or.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_subc_rir(rc, imm, ra) __asm__("subc %[rc_wr32], " imm ", %[ra_r32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_zir(zero, imm, rb) __asm__("subc %[zero], " imm ", %[rb_wr32]" ::[rb_wr32] "r"(rb) :)

#define __builtin_subc_rirci(rc, imm, ra, sub_nz_cc, pc)                                                                         \
    __asm__("subc %[rc_wr32], " imm ", %[ra_r32], " sub_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_zirci(zero, imm, ra, sub_nz_cc, pc)                                                                       \
    __asm__("subc %[zero], " imm ", %[ra_r32], " sub_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_subc_rirc(rc, imm, ra, sub_set_cc)                                                                             \
    __asm__("subc %[rc_wr32], " imm ", %[ra_r32], " sub_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_zirc(zero, imm, ra, sub_set_cc)                                                                           \
    __asm__("subc %[zero], " imm ", %[ra_r32], " sub_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_subc_rirf(rc, imm, ra, false_cc)                                                                               \
    __asm__("subc %[rc_wr32], " imm ", %[ra_r32], " false_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_zirf(zero, imm, ra, false_cc)                                                                             \
    __asm__("subc %[zero], " imm ", %[ra_r32], " false_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_subc_rrici(rc, ra, imm, sub_nz_cc, pc)                                                                         \
    __asm__("subc %[rc_wr32], %[ra_r32], " imm ", " sub_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_zrici(zero, ra, imm, sub_nz_cc, pc)                                                                       \
    __asm__("subc %[zero], %[ra_r32], " imm ", " sub_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_subc_rric(rc, ra, imm, ext_sub_set_cc)                                                                         \
    __asm__("subc %[rc_wr32], %[ra_r32], " imm ", " ext_sub_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_zric(zero, ra, imm, ext_sub_set_cc)                                                                       \
    __asm__("subc %[zero], %[ra_r32], " imm ", " ext_sub_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_subc_rrif(rc, ra, imm, false_cc)                                                                               \
    __asm__("subc %[rc_wr32], %[ra_r32], " imm ", " false_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_subc_zrif(zero, ra, imm, false_cc)                                                                             \
    __asm__("subc %[zero], %[ra_r32], " imm ", " false_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_subc_rrrci(rc, ra, rb, sub_nz_cc, pc)                                                                          \
    __asm__("subc %[rc_wr32], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc ""                                                      \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_subc_zrrci(zero, ra, rb, sub_nz_cc, pc)                                                                        \
    __asm__("subc %[zero], %[ra_r32], %[rb_wr32], " sub_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_subc_rrrc(rc, ra, rb, ext_sub_set_cc)                                                                          \
    __asm__("subc %[rc_wr32], %[ra_r32], %[rb_wr32], " ext_sub_set_cc ""                                                         \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_subc_zrrc(zero, ra, rb, ext_sub_set_cc)                                                                        \
    __asm__("subc %[zero], %[ra_r32], %[rb_wr32], " ext_sub_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_subc_rrr(rc, ra, rb)                                                                                           \
    __asm__("subc %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_subc_zrr(zero, ra, rb) __asm__("subc %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lbs_erri(endian, rc, ra, off)                                                                                  \
    __asm__("lbs " endian ", %[rc_wr32], %[ra_r32], " off "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_lbs_ersi(endian, rc, sa, off)                                                                                  \
    __asm__("lbs " endian ", %[rc_wr32], %[sa_r32], " off "" : [rc_wr32] "=r"(rc) : [sa_r32] "r"(sa) :)

#define __builtin_extub_u_rrci(dc, ra, log_nz_cc, pc)                                                                            \
    __asm__("extub.u %[dc_wr64], %[ra_r32], " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_extub_u_rrc(dc, ra, log_set_cc)                                                                                \
    __asm__("extub.u %[dc_wr64], %[ra_r32], " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_extub_u_rr(dc, ra) __asm__("extub.u %[dc_wr64], %[ra_r32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nand_u_rrici(dc, ra, imm, log_nz_cc, pc)                                                                       \
    __asm__("nand.u %[dc_wr64], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nand_u_rric(dc, ra, imm, log_set_cc)                                                                           \
    __asm__("nand.u %[dc_wr64], %[ra_r32], " imm ", " log_set_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nand_u_rrif(dc, ra, imm, false_cc)                                                                             \
    __asm__("nand.u %[dc_wr64], %[ra_r32], " imm ", " false_cc "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_nand_u_rrrci(dc, ra, rb, log_nz_cc, pc)                                                                        \
    __asm__("nand.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                    \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_nand_u_rrrc(dc, ra, rb, log_set_cc)                                                                            \
    __asm__("nand.u %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                           \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_nand_u_rrr(dc, ra, rb)                                                                                         \
    __asm__("nand.u %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_andn_rrici(rc, ra, imm, log_nz_cc, pc)                                                                         \
    __asm__("andn %[rc_wr32], %[ra_r32], " imm ", " log_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_andn_zrici(zero, ra, imm, log_nz_cc, pc)                                                                       \
    __asm__("andn %[zero], %[ra_r32], " imm ", " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_andn_rric(rc, ra, imm, log_set_cc)                                                                             \
    __asm__("andn %[rc_wr32], %[ra_r32], " imm ", " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_andn_zric(zero, ra, imm, log_set_cc)                                                                           \
    __asm__("andn %[zero], %[ra_r32], " imm ", " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_andn_rrif(rc, ra, imm, false_cc)                                                                               \
    __asm__("andn %[rc_wr32], %[ra_r32], " imm ", " false_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_andn_zrif(zero, ra, imm, false_cc)                                                                             \
    __asm__("andn %[zero], %[ra_r32], " imm ", " false_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_andn_rrrci(rc, ra, rb, log_nz_cc, pc)                                                                          \
    __asm__("andn %[rc_wr32], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc ""                                                      \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_andn_zrrci(zero, ra, rb, log_nz_cc, pc)                                                                        \
    __asm__("andn %[zero], %[ra_r32], %[rb_wr32], " log_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_andn_rrrc(rc, ra, rb, log_set_cc)                                                                              \
    __asm__("andn %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_andn_zrrc(zero, ra, rb, log_set_cc)                                                                            \
    __asm__("andn %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_andn_rrr(rc, ra, rb)                                                                                           \
    __asm__("andn %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_andn_zrr(zero, ra, rb) __asm__("andn %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_release_rici(ra, imm, release_cc, pc)                                                                          \
    __asm__("release %[ra_r32], " imm ", " release_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_mul_sh_uh_s_rrrci(dc, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sh_uh.s %[dc_wr64], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                               \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_uh_s_rrrc(dc, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sh_uh.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_uh_s_rrr(dc, ra, rb)                                                                                    \
    __asm__("mul_sh_uh.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_lsr_add_s_rrrici(dc, rb, ra, shift, div_nz_cc, pc)                                                             \
    __asm__("lsr_add.s %[dc_wr64], %[rb_wr32], %[ra_r32], " shift ", " div_nz_cc ", " pc ""                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [rb_wr32] "r"(rb), [ra_r32] "r"(ra)                                                                                \
            :)

#define __builtin_lsr_add_s_rrri(dc, rb, ra, shift)                                                                              \
    __asm__("lsr_add.s %[dc_wr64], %[rb_wr32], %[ra_r32], " shift "" : [dc_wr64] "=r"(dc) : [rb_wr32] "r"(rb), [ra_r32] "r"(ra) :)

#define __builtin_mul_sh_uh_rrrci(rc, ra, rb, mul_nz_cc, pc)                                                                     \
    __asm__("mul_sh_uh %[rc_wr32], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                                 \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_uh_zrrci(zero, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sh_uh %[zero], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_uh_rrrc(rc, ra, rb, log_set_cc)                                                                         \
    __asm__("mul_sh_uh %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_uh_zrrc(zero, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sh_uh %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_uh_rrr(rc, ra, rb)                                                                                      \
    __asm__("mul_sh_uh %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_uh_zrr(zero, ra, rb)                                                                                    \
    __asm__("mul_sh_uh %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_uh_rrrci(rc, ra, rb, mul_nz_cc, pc)                                                                     \
    __asm__("mul_sl_uh %[rc_wr32], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                                 \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_uh_zrrci(zero, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sl_uh %[zero], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_uh_rrrc(rc, ra, rb, log_set_cc)                                                                         \
    __asm__("mul_sl_uh %[rc_wr32], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                        \
            : [rc_wr32] "=r"(rc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sl_uh_zrrc(zero, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sl_uh %[zero], %[ra_r32], %[rb_wr32], " log_set_cc "" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_uh_rrr(rc, ra, rb)                                                                                      \
    __asm__("mul_sl_uh %[rc_wr32], %[ra_r32], %[rb_wr32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sl_uh_zrr(zero, ra, rb)                                                                                    \
    __asm__("mul_sl_uh %[zero], %[ra_r32], %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_mul_sh_sh_s_rrrci(dc, ra, rb, mul_nz_cc, pc)                                                                   \
    __asm__("mul_sh_sh.s %[dc_wr64], %[ra_r32], %[rb_wr32], " mul_nz_cc ", " pc ""                                               \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_sh_s_rrrc(dc, ra, rb, log_set_cc)                                                                       \
    __asm__("mul_sh_sh.s %[dc_wr64], %[ra_r32], %[rb_wr32], " log_set_cc ""                                                      \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [rb_wr32] "r"(rb)                                                                                \
            :)

#define __builtin_mul_sh_sh_s_rrr(dc, ra, rb)                                                                                    \
    __asm__("mul_sh_sh.s %[dc_wr64], %[ra_r32], %[rb_wr32]" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_clz_rrci(rc, ra, count_nz_cc, pc)                                                                              \
    __asm__("clz %[rc_wr32], %[ra_r32], " count_nz_cc ", " pc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_clz_zrci(zero, ra, count_nz_cc, pc)                                                                            \
    __asm__("clz %[zero], %[ra_r32], " count_nz_cc ", " pc "" ::[ra_r32] "r"(ra) :)

#define __builtin_clz_rrc(rc, ra, log_set_cc)                                                                                    \
    __asm__("clz %[rc_wr32], %[ra_r32], " log_set_cc "" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_clz_zrc(zero, ra, log_set_cc) __asm__("clz %[zero], %[ra_r32], " log_set_cc "" ::[ra_r32] "r"(ra) :)

#define __builtin_clz_rr(rc, ra) __asm__("clz %[rc_wr32], %[ra_r32]" : [rc_wr32] "=r"(rc) : [ra_r32] "r"(ra) :)

#define __builtin_clz_zr(zero, ra) __asm__("clz %[zero], %[ra_r32]" ::[ra_r32] "r"(ra) :)

#define __builtin_mul_step_rrrici(dc, ra, db, shift, boot_cc, pc)                                                                \
    __asm__("mul_step %[dc_wr64], %[ra_r32], %[db_wr64], " shift ", " boot_cc ", " pc ""                                         \
            : [dc_wr64] "=r"(dc)                                                                                                 \
            : [ra_r32] "r"(ra), [db_wr64] "r"(db)                                                                                \
            :)

#define __builtin_sh_erir(endian, ra, off, rb)                                                                                   \
    __asm__("sh " endian ", %[ra_r32], " off ", %[rb_wr32]" ::[ra_r32] "r"(ra), [rb_wr32] "r"(rb) :)

#define __builtin_sh_erii(endian, ra, off, imm) __asm__("sh " endian ", %[ra_r32], " off ", " imm "" ::[ra_r32] "r"(ra) :)

#define __builtin_sh_esir(endian, sa, off, rb)                                                                                   \
    __asm__("sh " endian ", %[sa_r32], " off ", %[rb_wr32]" ::[sa_r32] "r"(sa), [rb_wr32] "r"(rb) :)

#define __builtin_sh_esii(endian, sa, off, imm) __asm__("sh " endian ", %[sa_r32], " off ", " imm "" ::[sa_r32] "r"(sa) :)

#define __builtin_lbu_u_erri(endian, dc, ra, off)                                                                                \
    __asm__("lbu.u " endian ", %[dc_wr64], %[ra_r32], " off "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#define __builtin_lhu_u_erri(endian, dc, ra, off)                                                                                \
    __asm__("lhu.u " endian ", %[dc_wr64], %[ra_r32], " off "" : [dc_wr64] "=r"(dc) : [ra_r32] "r"(ra) :)

#endif /* BUILT_INS_H */
